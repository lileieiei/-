#--coding:UTF-8--
from tkinter import *
from tkinter import ttk
from tkinter import filedialog,messagebox
from tkinter.ttk import Scrollbar,Checkbutton,Label,Button
import cx_Oracle
import os
import sys
import xml.etree.ElementTree as ET
import re
import time
import xlrd
import copy

os.environ['NLS_LANG']='SIMPLIFIED CHINESE_CHINA.UTF8'

class information:
    def __init__(self,input):
        self.input=input
        self.output=None

    def get_result(self):
        return self.output
    
class get_xml(information):
    def __init__(self,bms_url,bms_port,bms_name,bms_user,bms_pass,sql):
        super().__init__(bms_url)
        self.bms_url=bms_url
        self.bms_user=bms_user
        self.bms_pass=bms_pass
        self.bms_port=bms_port
        self.bms_name=bms_name
        self.sql=sql
        self.output=None
        #self.get_xml_info()
        self.get_test_output()



    def get_xml_info(self):
        tns=cx_Oracle.makedsn(self.bms_url,self.bms_port,service_name=self.bms_name)
        db=cx_Oracle.connect(self.bms_user,self.bms_pass,tns)
        try:
            cr=db.cursor()
            cr.execute(self.sql)
            self.output=cr.fetchall()
            for i in self.output:
                
                if i[-1]!=None:
                    tmp_list_tuple=list(i)
                    
                    tmp_list_tuple[-1]=i[-1].read()
                    index=self.output.index(i)
                    self.output[index]=tuple(tmp_list_tuple)
                    #print(i)
            
        except Exception as e:
            print(e)
        finally:
            db.close()
            if self.output==None:
                print("cant find any data")
            #print(self.output)
            
    def get_test_output(self):
        self.output=[('20220224172101', '00000000000000073460', '100001000000002202202241020699189', 'CIM.004.002', '{H:00110000100000010000110000120220224172100CIM.004.002         00000000000000073461                    D3N000029145E336785E8B5619DAA46C569CC1CA5DE6DE30A243D1CFD7ABA9296A556A0E5BF         }\r\n<?xml version="1.0" encoding="UTF-8"?><Document><MainBody><MsgId><Id>100001000000002202202241020699189</Id><CreDtTm>2022-02-24T17:21:00</CreDtTm></MsgId><OrgnlMsgId><Id>100001000000002202201201020697266</Id><CreDtTm>2022-01-20T10:26:02</CreDtTm></OrgnlMsgId><SgnPsnInf><AppBrId>100001</AppBrId><NoDrtPtcptInf><Name>ÂøÖËöäÂáÑÊç∑ÈûëÂêÆÂæôËà∂‰πìÂøòÂò¥Êòì</Name><SocCode>92399703726078958W</SocCode><DistTp>DT02</DistTp><BrAcctInf><AcctName>ÂøÖËöäÂáÑÊç∑ÈûëÂêÆÂæôËà∂‰πìÂøòÂò¥Êòì</AcctName><Acct>0200000319201967739</Acct><OpenBrId>000000002</OpenBrId></BrAcctInf></NoDrtPtcptInf></SgnPsnInf><SgntrMk><PrxySgntr>PS01</PrxySgntr><PtcptSgntr>MIIF1wYJKoZIhvcNAQcCoIIFyDCCBcQCAQExCzAJBgUrDgMCGgUAMI
 IBqwYJKoZIhvcNAQcBoIIBnASCAZgwMDAwMDM5MjAwMDAwMzg0PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iZ2IyMzEyIj8+PFRyYWRlRGF0YT48ZmllbGQgbmFtZT0i19yxysr9IiB2YWx1ZT0iMSIgRGlzcGxheU9uU2NyZWVuPSJUUlVFIi8+PGZpZWxkIG5hbWU9ItfcvfC27iIgdmFsdWU9IjIsMzAyLjAw1KoiIERpc3BsYXlPblNjcmVlbj0iVFJVRSIvPjxmaWVsZCBuYW1lPSK1x8K8SUQiIHZhbHVlPSIwMTA2ai5jLjAyMDAiIERpc3BsYXlPblNjcmVlbj0iVFJVRSIvPjxmaWVsZCBuYW1lPSKy2df3yrG85CIgdmFsdWU9IjIwMjIwMjI0MTcxOTI4MDQ1MTY5MzY4NjEiIERpc3BsYXlPblNjcmVlbj0iVFJVRSIvPjxmaWVsZCBuYW1lPSKy2df3IiB2YWx1ZT0ixfrXvCIgRGlzcGxheU9uU2NyZWVuPSJUUlVFIi8+PC9UcmFkZURhdGE+MDAwMDAwMDCgggMQMIIDDDCCAfSgAwIBAgIKG5LKECVWAAM2ajANBgkqhkiG9w0BAQUFADA7MR8wHQYDVQQDExZJQ0JDIFRlc3QgQ29ycG9yYXRlIENBMRgwFgYDVQQKEw90ZXN0aWNiYy5jb20uY24wHhcNMjIwMTE4MDEwNTUyWhcNMjUwMTE4MDEwNTUyWjBAMRUwEwYDVQQDDAwwMTA2ai5jLjAyMDAxDTALBgNVBAsMBDAyMDAxGDAWBgNVBAoMD3Rlc3RpY2JjLmNvbS5jbjCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAsHoy7Aaqjjda9SVj1aN2873mCMSj9+pUE+rwnm5NF8k/RlcS4rGvL8nwIQ7uxxX5XTskv1ycHtks9m7/5bBD6cr8k+lVxdUjgFpaDpa0dpjCwATUmTf
 HG4Llj1YjjJLR4bmV8wtlSp++92px9tw8E8URiAJQTfwIOU7Prv87HSMCAwEAAaOBkDCBjTAfBgNVHSMEGDAWgBREfbeQLDek2e1s4qSHV2cKtfBNFDBLBgNVHR8ERDBCMECgPqA8pDowODEOMAwGA1UEAwwFY3JsNDMxDDAKBgNVBAsMA2NybDEYMBYGA1UECgwPdGVzdGljYmMuY29tLmNuMB0GA1UdDgQWBBQ88Zq71ELwPJr7MiJdXMD84lzirjANBgkqhkiG9w0BAQUFAAOCAQEAN6MhmuMa4WcmA6AxQy+hESqct30ktTi2T6VeTXHKGDjaSzKJDc+lw84nT4IEA+H6fqu+dCYVheWewYnqEy8BpeDIq9NASs+9LErvL0dm5EdBa4l0el8KQxLJs+quqmTkKxO+2aikRjL5wMVZec4n3nGSwL4TheHiuZuvBWIKKYFp2Sidh9urZLQMShbf5cwM7soAscZ5VnqHwnvFggk8+qD6tokCn0O6mQooX0MoqRXn+TOP+gZPR7gGTro/LMzgGiKRNgfMNiBTKuAOldzy1VbeIxzgLsa/9N8iaYK6rgCrkiiudN32LP0xP5X1DQzKjujIPNBxicV3MGjrexsH6TGB7jCB6wIBATBJMDsxHzAdBgNVBAMTFklDQkMgVGVzdCBDb3Jwb3JhdGUgQ0ExGDAWBgNVBAoTD3Rlc3RpY2JjLmNvbS5jbgIKG5LKECVWAAM2ajAJBgUrDgMCGgUAMA0GCSqGSIb3DQEBAQUABIGAB6ylhViFCtE2RsHcOevGp78vqYmi9pJC7BeAcJmnKJWw3fhFz9/UudxnqhzFgLFcIB1OqbqqDJi/rckt9IEWYRWdWI+bin7tgQ743C0LsKJs0rrV3mNVk4PwEDJ+CPCD029z23Y7cZxAiIMwsnVw42ITRnqHDVHMsQG4UEEwdBw=</PtcptSgntr></SgntrMk><SgnUpInf><Dt>2022-02-24<
 /Dt><SgnUpMk>SU00</SgnUpMk><SgnUpCode>CP06</SgnUpCode><OtherInf>123</OtherInf></SgnUpInf></MainBody><PtcptSgntr>MEUCIQC3Eb+oWhndoU9ZzK0WTv4diOOBVU7gjTaBDgziy6OBAwIgF8mHYcmMxhsBg89kGDKJN1DxM+wlgckioLed0PZSzbU=</PtcptSgntr></Document>', None), ('20220222102903', '00000000000000073202', '100001000000002202202221020699060', 'CIM.004.002', '{H:00110000100000010000110000120220222102903CIM.004.002         00000000000000073203                    D3N00002884965A0E06862063978C98D90D0A4137DECAC21383AB9DDBCD4E1B2FE6BFD8C16D         }\r\n<?xml version="1.0" encoding="UTF-8"?><Document><MainBody><MsgId><Id>100001000000002202202221020699060</Id><CreDtTm>2022-02-22T10:29:03</CreDtTm></MsgId><OrgnlMsgId><Id>100001000000002202201201020697266</Id><CreDtTm>2022-01-20T10:26:02</CreDtTm></OrgnlMsgId><SgnPsnInf><AppBrId>100001</AppBrId><NoDrtPtcptInf><Name>ÂøÖËöäÂáÑÊç∑ÈûëÂêÆÂæôËà∂‰πìÂøòÂò¥Êòì</Name><SocCode>92399703726078958W</SocCode><DistTp>DT02</DistTp><BrAcctInf><AcctName>ÂøÖËöäÂáÑÊç∑ÈûëÂêÆÂæôËà∂‰πìÔø
 Ω ÔøΩÂò¥Êòì</AcctName><Acct>0200000319201967739</Acct><OpenBrId>000000002</OpenBrId></BrAcctInf></NoDrtPtcptInf></SgnPsnInf><SgntrMk><PrxySgntr>PS01</PrxySgntr><PtcptSgntr>MIIGEgYJKoZIhvcNAQcCoIIGAzCCBf8CAQExCzAJBgUrDgMCGgUAMIIB6AYJKoZI\nhvcNAQcBoIIB2QSCAdUxMTAwMDAwMDA0NTcyMTAwMDAwMDAzODI8P3htbCB2ZXJz\naW9uPSIxLjAiIGVuY29kaW5nPSJnYjIzMTIiPz48VHJhZGVEYXRhPjxmaWVsZCBu\nYW1lPSLX3LHKyv0iIHZhbHVlPSIxIiBEaXNwbGF5T25TY3JlZW49IlRSVUUiLz48\nZmllbGQgbmFtZT0i19y98LbuIiB2YWx1ZT0iMiwzMDIuMDDUqiIgRGlzcGxheU9u\nU2NyZWVuPSJUUlVFIi8+PGZpZWxkIG5hbWU9IrXHwrxJRCIgdmFsdWU9IjY1MS5j\nLjAyMDAiIERpc3BsYXlPblNjcmVlbj0iVFJVRSIvPjxmaWVsZCBuYW1lPSKy2df3\nyrG85CIgdmFsdWU9IjIwMjIwMjIyMTAyMzMzOTYyNjMzMDE2MjIiIERpc3BsYXlP\nblNjcmVlbj0iVFJVRSIvPjxmaWVsZCBuYW1lPSKy2df3IiB2YWx1ZT0ivty++CIg\nRGlzcGxheU9uU2NyZWVuPSJUUlVFIi8+PC9UcmFkZURhdGE+MjIwMDAwMDAwMDM5\n19yxysr9o7oxo6zX3L3wtu6jujIsMzAyLjAw1KoouaTJzNL40NApMjMwMDAwMDAw\nMDAwoIIDDjCCAwowggHyoAMCAQICChuSyhAlVgADNQowDQYJKoZIhvcNAQEFBQAw\nOzEfMB0GA1UEAxMWSUNCQyBUZXN0IENvc
 nBvc mF0ZSBDQTEYMBYGA1UEChMPdGVz\ndGljYmMuY29tLmNuMB4XDTIyMDEwNjA5MDMwOVoXDTI3MDEwNjA5MDMwOVowPjET\nMBEGA1UEAwwKNjUxLmMuMDIwMDENMAsGA1UECwwEMDIwMDEYMBYGA1UECgwPdGVz\ndGljYmMuY29tLmNuMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD3w8yiYQOw\n64tAPMcICO5BTOYPHMfCPnHhe5kGM01U7GN+HzaC3Iiwcd5Hrbjg021E0fvkvqj4\nySpdlD7mnJALLW/ugtCu+Q8EKyzIs6bf9kcY1+i08cdf5QCbypTVzhwUzq8L/eZ2\nhvNKF/YY+dmlncU3pSHmqKTsW1vJTt2JOQIDAQABo4GQMIGNMB8GA1UdIwQYMBaA\nFER9t5AsN6TZ7WzipIdXZwq18E0UMEsGA1UdHwREMEIwQKA+oDykOjA4MQ4wDAYD\nVQQDDAVjcmw0MzEMMAoGA1UECwwDY3JsMRgwFgYDVQQKDA90ZXN0aWNiYy5jb20u\nY24wHQYDVR0OBBYEFJmqzK3zku4F1k7Btti3zD+P3dkKMA0GCSqGSIb3DQEBBQUA\nA4IBAQBcWLtH6eO+XGv1B744bMgHZFzYfAzAD6jv+kMfrIXoDHtvo/BmRFTYAncq\nSb9oe9gJub5eB1/b82CZN5m+rM7bxoa8t0pz+q9zmyBV4ctGHYUE9lbtcCSepsX5\nR/h71VCEfx6Sw1rjDPzDM/c7kzPDX31M3gr3E6MfFJvKKaIPFbZWX7XA+qRCGZGF\nBMQMAK2uZ1DzOv6poJTc+TG3Vn+HMkwSA4y1gflisBbvC41stUwXbn9c6AUbbjcR\nqymHrvFZR7L5kuy9mx92MLhRdJJA6gXSPnheYP9b4b/hX67fgBXMg1V6JCli/Seu\nlWPBBLHZGJIudYXu5MD3KujkQzH1MYHuMIHrAgE
 BMEkw OzEfMB0GA1UEAxMWSUNC\nQyBUZXN0IENvcnBvcmF0ZSBDQTEYMBYGA1UEChMPdGVzdGljYmMuY29tLmNuAgob\nksoQJVYAAzUKMAkGBSsOAwIaBQAwDQYJKoZIhvcNAQEBBQAEgYCx9y6RaCFyxV9W\nigupgc3uPupBseY3gPdW</PtcptSgntr></SgntrMk><SgnUpInf><Dt>2022-02-22</Dt><SgnUpMk>SU01</SgnUpMk><SgnUpCode>CP06</SgnUpCode><OtherInf>123</OtherInf></SgnUpInf></MainBody><PtcptSgntr>MEUCIQCD6b1ZwbG4WCd22VpCEzH/8bZaB+zu3mjHygqZVCNjQQIgOOgX7oB+QzS5lYnCuH6D/ZSPdZel/S5koZJOtKrec3k=</PtcptSgntr></Document>', None), ('20220222100641', '00000000000000073108', '100001000000002202202221020699013', 'CIM.004.002', '{H:00110000100000010000110000120220222100640CIM.004.002         00000000000000073109                    D3N000028848F81D2CEC0AC69EEF19A3A0D40256BAD2E84FEBC1596D57E745EFF72E94CE50F         }\r\n<?xml version="1.0" encoding="UTF-8"?><Document><MainBody><MsgId><Id>100001000000002202202221020699013</Id><CreDtTm>2022-02-22T10:06:40</CreDtTm></MsgId><OrgnlMsgId><Id>100001000000002202201201020697266</Id><CreDtTm>2022-01-20T10:26:02</C
 reDtTm ></OrgnlMsgId><SgnPsnInf><AppBrId>100001</AppBrId><NoDrtPtcptInf><Name>ÂøÖËöäÂáÑÊç∑ÈûëÂêÆÂæôËà∂‰πìÂøòÂò¥Êòì</Name><SocCode>92399703726078958W</SocCode><DistTp>DT02</DistTp><BrAcctInf><AcctName>ÂøÖËöäÂáÑÊç∑ÈûëÂêÆÂæôËà∂‰πìÂøòÂò¥Êòì</AcctName><Acct>0200000319201967739</Acct><OpenBrId>000000002</OpenBrId></BrAcctInf></NoDrtPtcptInf></SgnPsnInf><SgntrMk><PrxySgntr>PS01</PrxySgntr><PtcptSgntr>MIIGEgYJKoZIhvcNAQcCoIIGAzCCBf8CAQExCzAJBgUrDgMCGgUAMIIB6AYJKoZI\nhvcNAQcBoIIB2QSCAdUxMTAwMDAwMDA0NTcyMTAwMDAwMDAzODI8P3htbCB2ZXJz\naW9uPSIxLjAiIGVuY29kaW5nPSJnYjIzMTIiPz48VHJhZGVEYXRhPjxmaWVsZCBu\nYW1lPSLX3LHKyv0iIHZhbHVlPSIxIiBEaXNwbGF5T25TY3JlZW49IlRSVUUiLz48\nZmllbGQgbmFtZT0i19y98LbuIiB2YWx1ZT0iMiwzMDIuMDDUqiIgRGlzcGxheU9u\nU2NyZWVuPSJUUlVFIi8+PGZpZWxkIG5hbWU9IrXHwrxJRCIgdmFsdWU9IjY1MS5j\nLjAyMDAiIERpc3BsYXlPblNjcmVlbj0iVFJVRSIvPjxmaWVsZCBuYW1lPSKy2df3\nyrG85CIgdmFsdWU9IjIwMjIwMjIyMDk1OTEyNDMxMjYyMTY3NzEiIERpc3BsYXlP\nblNjcmVlbj0iVFJVRSIvPjxmaWVsZCBuYW1lPSKy2df3IiB2YWx1ZT0ivty++CIg\nRGlzcG
 xheU9uU 2NyZWVuPSJUUlVFIi8+PC9UcmFkZURhdGE+MjIwMDAwMDAwMDM5\n19yxysr9o7oxo6zX3L3wtu6jujIsMzAyLjAw1KoouaTJzNL40NApMjMwMDAwMDAw\nMDAwoIIDDjCCAwowggHyoAMCAQICChuSyhAlVgADNQowDQYJKoZIhvcNAQEFBQAw\nOzEfMB0GA1UEAxMWSUNCQyBUZXN0IENvcnBvcmF0ZSBDQTEYMBYGA1UEChMPdGVz\ndGljYmMuY29tLmNuMB4XDTIyMDEwNjA5MDMwOVoXDTI3MDEwNjA5MDMwOVowPjET\nMBEGA1UEAwwKNjUxLmMuMDIwMDENMAsGA1UECwwEMDIwMDEYMBYGA1UECgwPdGVz\ndGljYmMuY29tLmNuMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD3w8yiYQOw\n64tAPMcICO5BTOYPHMfCPnHhe5kGM01U7GN+HzaC3Iiwcd5Hrbjg021E0fvkvqj4\nySpdlD7mnJALLW/ugtCu+Q8EKyzIs6bf9kcY1+i08cdf5QCbypTVzhwUzq8L/eZ2\nhvNKF/YY+dmlncU3pSHmqKTsW1vJTt2JOQIDAQABo4GQMIGNMB8GA1UdIwQYMBaA\nFER9t5AsN6TZ7WzipIdXZwq18E0UMEsGA1UdHwREMEIwQKA+oDykOjA4MQ4wDAYD\nVQQDDAVjcmw0MzEMMAoGA1UECwwDY3JsMRgwFgYDVQQKDA90ZXN0aWNiYy5jb20u\nY24wHQYDVR0OBBYEFJmqzK3zku4F1k7Btti3zD+P3dkKMA0GCSqGSIb3DQEBBQUA\nA4IBAQBcWLtH6eO+XGv1B744bMgHZFzYfAzAD6jv+kMfrIXoDHtvo/BmRFTYAncq\nSb9oe9gJub5eB1/b82CZN5m+rM7bxoa8t0pz+q9zmyBV4ctGHYUE9lbtcCSepsX5\nR/h71VCEfx6S
 w1rjDPzD M/c7kzPDX31M3gr3E6MfFJvKKaIPFbZWX7XA+qRCGZGF\nBMQMAK2uZ1DzOv6poJTc+TG3Vn+HMkwSA4y1gflisBbvC41stUwXbn9c6AUbbjcR\nqymHrvFZR7L5kuy9mx92MLhRdJJA6gXSPnheYP9b4b/hX67fgBXMg1V6JCli/Seu\nlWPBBLHZGJIudYXu5MD3KujkQzH1MYHuMIHrAgEBMEkwOzEfMB0GA1UEAxMWSUNC\nQyBUZXN0IENvcnBvcmF0ZSBDQTEYMBYGA1UEChMPdGVzdGljYmMuY29tLmNuAgob\nksoQJVYAAzUKMAkGBSsOAwIaBQAwDQYJKoZIhvcNAQEBBQAEgYC8ZGjzR3r73pk6\nTsOLkUJlrWvLjcAfFFr4</PtcptSgntr></SgntrMk><SgnUpInf><Dt>2022-02-22</Dt><SgnUpMk>SU01</SgnUpMk><SgnUpCode>CP06</SgnUpCode><OtherInf>123</OtherInf></SgnUpInf></MainBody><PtcptSgntr>MEQCIARvNpliLdP14KuXXyL30TlLeQQaRVk76+IbSIalnDjOAiAUofGG6FIlCHSShJ9gZo0p+WhPblmdTkxc6o54wsbg7g==</PtcptSgntr></Document>', None),  ]

        
        #print(self.output)
        return self.output

#Ëé∑ÂèñÂ≠óÂÖ∏ÂéüÂßãÊï∞ÊçÆ
class get_dict_meaning(information):    
    def __init__(self, dir_case):
        super().__init__(dir_case)
        self.def_data=self.get_data(dir_case)      
        #self.tree=self.build_tree(self.def_data)
        #self.tree2dic(self.tree,self.mean_dict)
        #self.mean_dict_all.append(self.mean_dict)

# Ê†πÊçÆÂú∞ÂùÄdir_caseËé∑ÂèñË°®‰∏≠ÂÜÖÂÆπÔºåËøîÂõû‰∏Ä‰∏™Â≠óÂÖ∏{sheetÂêçÔºö{Ë°åÂêçÔºåË°åÂÜÖÂÆπ}}
    def get_data(self,dir_case):
        result={}
        data = xlrd.open_workbook(dir_case)
        dictionary={}
        tmp=[]
        for i in data.sheets():
            # table = data.sheets()[sheetnum]
            nor = i.nrows
            nol = i.ncols
            print(nor,nol)
            
            for k in range(1, nor):
                for j in range(nol):
                    title = i.cell_value(0, j)
                    value = i.cell_value(k, j)
                    
                    dictionary[title] = value
                #print(tmp)
                tmp.append(dictionary)
                dictionary={}
                #print(tmp)
            #print(tmp)
    # yield dict
            pop_index=[]
            for m in range(len(tmp)):
                if tmp[m]['Â∫èÂè∑']!="":
                    cur=m
                if tmp[m]['Â∫èÂè∑']=="":
                    tmp[m-1]['Â§áÊ≥®']=tmp[m-1]['Â§áÊ≥®']+'\n'+tmp[m]['Â§áÊ≥®']
                    pop_index.append(m)
            for k in reversed(pop_index):        
                tmp.pop(k)
            result[i.name]=tmp
            tmp=[]
            dictionary={}
            
        #print(result)
        return result



    def ret_last_elem(self,root_dic):
        # print(root_dic)
        if len(root_dic['children'])>0:
            ret_last_elem(root_dic['children'][-1])
        else:
            return root_dic
    def build_children(self,node,cur_node,root):
        if cur_node['Ë¶ÅÁ¥†ÂêçÁß∞'].count("--")>node['Ë¶ÅÁ¥†ÂêçÁß∞'].count("--")-1:
    # if ret_last_elem(root[-1])['Ë¶ÅÁ¥†ÂêçÁß∞'].count("--")>=node['Ë¶ÅÁ¥†ÂêçÁß∞'].count("--"):
            # print("ifÊù°‰ª∂",cur_node['Ë¶ÅÁ¥†ÂêçÁß∞'].count("--"),node['Ë¶ÅÁ¥†ÂêçÁß∞'].count("--"))
            
            self.build_children(node,cur_node['parent'],root)
        elif cur_node['Ë¶ÅÁ¥†ÂêçÁß∞'].count("--")==node['Ë¶ÅÁ¥†ÂêçÁß∞'].count("--")-1 :
            node['parent']=cur_node
    # print(node,"\n",cur_node)
            cur_node['children'].append(node)
        elif len(cur_node['children'])>0:
            # print(cur_node)
            self.build_children(node,cur_node['children'][-1],root)

# Âª∫Á´ã‰∏Ä‰∏™Ê†ëÂΩ¢ÊûÑÊàêÔºåËæìÂÖ•ÊòØÂ≠óÂÖ∏ÔºåËæìÂá∫
    def build_tree(self,data):
        root=list()
        idx=0
    # while idx<len(data):
        #print(data)
        for a,b in data.items():
            for i in b:
                if i['Ë¶ÅÁ¥†ÂêçÁß∞'].count("--")==0:
                    i['parent']=""
                    i['children']=[]
                    root.append(i)              
                else:
        # print("build_tree",i,ret_last_elem(root[-1]))
                    i['parent']=[]
                    i['children']=[]
                    #print(a,b,i,root)
                    self.build_children(i,root[-1],root)
                for j in root:
                    if j['Â∫èÂè∑']=="":
                        root.remove(j)
                res[h]=root
        #print(res)
        return res    
        

class xml_parser(information):
    def __init__(self,input):
        super().__init__(input)

    def read_standize(self):
        pass

    def get_result(self):
        tree = ET.parse(self.input)
        root = tree.getroot()
        self.output=root
        return self.output

class NotePad(Tk):
    
    def __init__(self):
        #Â≠òÂÇ®ÂéüÊä•Êñá
        self.orgin_id=set()
        #Â≠òÂÇ®Êü•ËØ¢ÁªìÊûúres={'202201011221':['time','id',]}
        self.mesg_mean={'MEM.001.002':'‰∏öÂä°ÂäûÁêÜÊ∏†ÈÅì‰ø°ÊÅØÈÄöÁü•Êä•Êñá','MEM.002.002':'Êú∫ÊûÑÂèÇ‰∏éËÄÖ‰ø°ÊÅØÈÄöÁü•Êä•Êñá','MEM.003.002':'Êú∫ÊûÑÂèÇ‰∏éËÄÖ‰∫§ÊòìÂëò‰ø°ÊÅØÈÄöÁü•Êä•Êñá','MEM.004.002':'Êú∫ÊûÑÂèÇ‰∏éËÄÖÊñ∞ÂéüÂÖ≥Á≥ªÈÄöÁü•Êä•Êñá','MEM.005.002':'ÂàõÂª∫‰øÆÊîπÊú∫ÊûÑÂèÇ‰∏éËÄÖÈÄöÁü•Êä•Êñá','MEM.006.001':'Êú∫ÊûÑÂèÇ‰∏éËÄÖ‰ø°ÊÅØÁª¥Êä§Áî≥ËØ∑Êä•Êñá','MEM.007.001':'‰ºÅ‰∏öÂèÇ‰∏éËÄÖ‰ø°ÊÅØÁª¥Êä§Áî≥ËØ∑','MEM.008.001':'‰∏öÂä°ÂèÇ‰∏éËÄÖ‰ø°ÊÅØÊü•ËØ¢Áî≥ËØ∑','MEM.009.001':'‰∏öÂä°ÂèÇ‰∏éËÄÖ‰ø°ÊÅØÊü•ËØ¢Â∫îÁ≠î','MEM.010.001':'‰∏öÂä°ÂèÇ‰∏éËÄÖÊâøÊé•ÂÖ≥Á≥ªÂèòÊõ¥Áî≥ËØ∑Êä•Êñá','MEM.011.001':'‰∏öÂä°ÂèÇ‰∏éËÄÖÊîØ‰ªò‰ø°Áî®Êü•ËØ¢Áî≥ËØ∑Êä•Êñá','MEM.012.001':'‰∏öÂä°ÂèÇ‰∏éËÄÖÊîØ‰ªò‰ø°Áî®Êü•ËØ¢Â∫îÁ≠îÊä•Êñá','PAM.001.001':'‰∏ªÂä®ÁÆ°ÁêÜÁî≥ËØ∑Êä•Êñá','PAM.002.001':'‰∏ªÂä®ÁÆ°ÁêÜÁª¥Êä§Áî≥ËØ∑Êä•Êñá','PAM.003.001':'‰∏ªÂä®ÁÆ°ÁêÜÊùÉÈôêÁª¥Êä§Áî≥ËØ∑Êä•Êñá','PAM.004.001':'‰∏ªÂä®ÁÆ°ÁêÜÈÄöÁü•Êä•Êñá','NCP.001.002':'ÊâøÂÖë‰ø°ÊÅØÁôªËÆ∞Áî≥ËØ∑Êä•Êñá','NCP.002.002':'ÊâøÂÖë‰øùËØÅ‰ø°ÊÅØÁôªËÆ∞Áî≥ËØ∑Êä•Êñá','NCP.003.002':'Ë¥®Êäº‰ø°ÊÅ
 ØÁôªËÆ∞Áî≥ËØ∑Êä•Êñá','NCP.004.002':'Ë¥®ÊäºËß£Èô§‰ø°ÊÅØÁôªËÆ∞Áî≥ËØ∑Êä•Êñá','NCP.005.002':'Ë¥¥Áé∞‰ø°ÊÅØÁôªËÆ∞Áî≥ËØ∑Êä•Êñá','NCP.006.002':'ÁªìÊ∏Ö‰ø°ÊÅØÁôªËÆ∞Áî≥ËØ∑Êä•Êñá','NCP.007.002':'Ê≠¢‰ªò‰ø°ÊÅØÁôªËÆ∞Áî≥ËØ∑Êä•Êñá','NCP.008.002':'Ê≠¢‰ªòËß£Èô§ÁôªËÆ∞Áî≥ËØ∑Êä•Êñá','NCP.009.002':'Ê≠¢‰ªòÂèäÊ≠¢‰ªòËß£Èô§ÁôªËÆ∞ÈÄöÁü•Êä•Êñá','NCP.010.002':'‰ø°ÊÅØÁôªËÆ∞Á±ªÊí§ÂõûÁî≥ËØ∑Êä•Êñá','NCP.011.002':'Á∫∏Á•®ÁôªËÆ∞‰ø°ÊÅØÊü•ËØ¢Áî≥ËØ∑Êä•Êñá','NCP.012.002':'Á∫∏Á•®ÁôªËÆ∞‰ø°ÊÅØÊü•ËØ¢Â∫îÁ≠îÊä•Êñá','NCP.013.002':'Â∫ìÂ≠òÂèòÊõ¥Áî≥ËØ∑Êä•Êñá','NCP.014.002':'Â∫ìÂ≠òÂèòÊõ¥ÈÄöÁü•Êä•Êñá','NCP.015.002':'‰øùËØÅÂ¢û‰ø°Áî≥ËØ∑Êä•Êñá','NCP.016.002':'‰ªòÊ¨æÁ°ÆËÆ§Áî≥ËØ∑Êä•Êñá','NCP.017.002':'‰ªòÊ¨æÁ°ÆËÆ§ÁªìÊûúÈÄöÁü•Êä•Êñá','CPR.011.002':'ËøΩÂÅøÁªìÊ∏ÖÁôªËÆ∞Áî≥ËØ∑Êä•Êñá','NES.001.001':'Âá∫Á•®‰ø°ÊÅØÁôªËÆ∞Áî≥ËØ∑Êä•Êñá','NES.002.001':'ÊèêÁ§∫ÊâøÂÖëÁî≥ËØ∑Êä•Êñá','NES.003.001':'ÊèêÁ§∫Êî∂Á•®Áî≥ËØ∑Êä•Êñá','NES.004.001':'‰øùËØÅÁî≥ËØ∑','NES.005.001':'Â¢û‰ø°ÂèäÂ¢û‰ø°Áä∂ÊÄÅÁª¥Êä§Áî≥ËØ∑','NES.006.001':'ËÉå‰π¶ËΩ¨ËÆ©Áî≥ËØ∑Êä•Êñá','NES.007.001':'Ë
 ¥¥Áé∞Áî≥ËØ∑Êä•Êñá','NES.008.001':'ÂõûË¥≠ÂºèË¥¥Áé∞ËµéÂõûÁî≥ËØ∑','NES.009.001':'Ë¥®ÊäºÁî≥ËØ∑','NES.010.001':'Ë¥®ÊäºËß£Èô§Áî≥ËØ∑','NES.011.001':'ÊèêÁ§∫‰ªòÊ¨æÁî≥ËØ∑Êä•Êñá','NES.012.001':'ËøΩÁ¥¢ÈÄöÁü•','NES.013.001':'ËøΩÁ¥¢ÂêåÊÑèÊ∏ÖÂÅøÁî≥ËØ∑','NES.014.001':'Êí§Á•®Áî≥ËØ∑','NES.015.001':'‰∏çÂæóËΩ¨ËÆ©Ê†áËÆ∞Êí§ÈîÄÁî≥ËØ∑','CPR.010.002':'Á∫ø‰∏ãËøΩÂÅøÁôªËÆ∞Áî≥ËØ∑Êä•Êñá','CPR.014.002':'ÁîµÁ•®ËΩ¨ÂÖ•ÈÄöÁü•Êä•Êñá','CPR.015.002':'Èùû‰∫§ÊòìËøáÊà∑Áî≥ËØ∑Êä•Êñá','CPR.016.002':'ÊèêÂâçÂíåÈÄæÊúüËµéÂõûÁî≥ËØ∑Êä•Êñá','CPR.018.002':'‰æõÂ∫îÈìæÁ•®ÊçÆÊò†Â∞ÑÂÖ≥Á≥ªÊü•ËØ¢Áî≥ËØ∑','CPR.019.002':'‰æõÂ∫îÈìæÁ•®ÊçÆÊò†Â∞ÑÂÖ≥Á≥ªÊü•ËØ¢Â∫îÁ≠î','CPR.020.002':'‰æõÂ∫îÈìæÁ•®ÊçÆ‰ø°ÊÅØÊü•ËØ¢Áî≥ËØ∑Êä•Êñá','CPR.021.002':'‰æõÂ∫îÈìæÁ•®ÊçÆ‰ø°ÊÅØÊü•ËØ¢Â∫îÁ≠îÊä•Êñá','CES.001.002':'ËΩ¨Ë¥¥Áé∞ÂØπËØùÊä•‰ª∑ÂèëÈÄÅ‰øÆÊîπÁî≥ËØ∑Êä•Êñá','CES.002.002':'ËΩ¨Ë¥¥Áé∞ÂØπËØùÊä•‰ª∑ËΩ¨ÂèëÊä•Êñá','CES.003.002':'ËΩ¨Ë¥¥Áé∞Êàê‰∫§ÈÄöÁü•Êä•Êñá','CES.004.002':'Ë¥®ÊäºÂºèÂõûË¥≠ÂØπËØùÊä•‰ª∑ÂèëÈÄÅ‰øÆÊîπÁî≥ËØ∑Êä•Êñá','CES.005.002':'Ë¥®ÊäºÂºèÂõûË¥≠ÂØπËØùÊä•‰ª∑ËΩ¨ÂèëÊä•Êñ
 á','CES.006.002':'Ë¥®ÊäºÂºèÂõûË¥≠Êàê‰∫§ÈÄöÁü•Êä•Êñá','CES.007.002':'‰π∞Êñ≠ÂºèÂõûË¥≠ÂØπËØùÊä•‰ª∑ÂèëÈÄÅ‰øÆÊîπÁî≥ËØ∑Êä•Êñá','CES.008.002':'‰π∞Êñ≠ÂºèÂõûË¥≠ÂØπËØùÊä•‰ª∑ËΩ¨ÂèëÊä•Êñá','CES.009.002':'‰π∞Êñ≠ÂºèÂõûË¥≠Êàê‰∫§ÈÄöÁü•Êä•Êñá','CES.010.002':'‰∫§Êòì‰∏öÂä°Á°ÆËÆ§Êä•Êñá','CES.011.002':'ÂØπËØùÊä•‰ª∑Êàê‰∫§/ÁªàÊ≠¢Â∫îÁ≠îÊä•Êñá','CES.012.002':'ÂØπËØùÊä•‰ª∑ÁªàÊ≠¢ÈÄöÁü•Êä•Êñá','CES.013.002':'ËΩ¨Ë¥¥Áé∞ÊÑèÂêëËØ¢‰ª∑ÂèëÈÄÅ‰øÆÊîπÁî≥ËØ∑Êä•Êñá','CES.014.002':'ËΩ¨Ë¥¥Áé∞ÊÑèÂêëËØ¢‰ª∑ËΩ¨ÂèëÊä•Êñá','CES.015.002':'Ë¥®ÊäºÂºèÂõûË¥≠ÊÑèÂêëËØ¢‰ª∑ÂèëÈÄÅ‰øÆÊîπÁî≥ËØ∑Êä•Êñá','CES.016.002':'Ë¥®ÊäºÂºèÂõûË¥≠ÊÑèÂêëËØ¢‰ª∑ËΩ¨ÂèëÊä•Êñá','CES.017.002':'‰π∞Êñ≠ÂºèÂõûË¥≠ÊÑèÂêëËØ¢‰ª∑ÂèëÈÄÅ‰øÆÊîπÁî≥ËØ∑Êä•Êñá','CES.018.002':'‰π∞Êñ≠ÂºèÂõûË¥≠ÊÑèÂêëËØ¢‰ª∑ËΩ¨ÂèëÊä•Êñá','CES.019.002':'ÊÑèÂêëËØ¢‰ª∑Êí§ÈîÄÊä•Êñá','CES.020.002':'ÂÜçË¥¥Áé∞Ë¥®ÊäºÂºèÂõûË¥≠ÂèëÈÄÅ‰øÆÊîπÁî≥ËØ∑Êä•Êñá','CES.021.002':'ÂÜçË¥¥Áé∞Ë¥®ÊäºÂºèÂõûË¥≠Êàê‰∫§ÈÄöÁü•Êä•Êñá','CES.022.002':'ÂÜçË¥¥Áé∞‰π∞Êñ≠ÂèëÈÄÅ‰øÆÊîπÁî≥ËØ∑Êä•Êñá','CES.023.002':'ÂÜçË¥¥Áé∞‰π∞Êñ≠Êàê‰∫§ÈÄöÁü•Êä•Êñ
 á','CES.024.002':'ÂÜçË¥¥Áé∞ÂÆ°ÊâπÁªìÊûúÈÄöÁü•Êä•Êñá','CES.025.002':'ÂÜçË¥¥Áé∞‰ΩúÂ∫üÁî≥ËØ∑Êä•Êñá','CES.026.002':'ÂÜçË¥¥Áé∞Êéà‰ø°ÈÄöÁü•Êä•Êñá','CES.027.002':'ÂÜçË¥¥Áé∞ÂèóÁêÜÂÖ≥Á≥ªÈÄöÁü•Êä•Êñá','CES.028.002':'ËΩ¨Ë¥¥Áé∞ÁÇπÂáªÊàê‰∫§ÂèëÈÄÅÁî≥ËØ∑Êä•Êñá','CES.029.002':'ËΩ¨Ë¥¥Áé∞ÁÇπÂáªÊàê‰∫§ËΩ¨ÂèëÊä•Êñá','CES.030.002':'ËΩ¨Ë¥¥Áé∞ÁÇπÂáªÊàê‰∫§Â∫îÁ≠îÊä•Êñá','CES.031.002':'ÁÇπÂáªÊàê‰∫§Êä•‰ª∑Êí§ÈîÄÁî≥ËØ∑Êä•Êñá','CES.032.002':'ÁÇπÂáªÊàê‰∫§Áä∂ÊÄÅÊõ¥Êñ∞ÈÄöÁü•Êä•Êñá','CES.033.002':'Ë¥®ÊäºÂºèÂõûË¥≠ÂåøÂêçÁÇπÂáªÂèëÈÄÅÁî≥ËØ∑Êä•Êñá','CES.034.002':'Ë¥®ÊäºÂºèÂõûË¥≠ÂåøÂêçÁÇπÂáªÂåπÈÖçÊàêÂäüÈÄöÁü•Êä•Êñá','CES.035.002':'Ë¥®ÊäºÂºèÂõûË¥≠ÂåøÂêçÁÇπÂáªÁ•®ÊçÆÊèê‰∫§Áî≥ËØ∑Êä•Êñá','CES.036.002':'ÂåøÂêçÁÇπÂáªÊä•‰ª∑Êí§ÈîÄÁî≥ËØ∑Êä•Êñá','CES.037.002':'ÂåøÂêçÁÇπÂáªÁä∂ÊÄÅÊõ¥Êñ∞ÈÄöÁü•Êä•Êñá','CES.038.002':'Êéà‰ø°‰ø°ÊÅØÁª¥Êä§Áî≥ËØ∑Êä•Êñá','CAS.001.002':'Á•®ÊçÆ‰∏öÂä°ÁªìÁÆóÁªìÊûúÈÄöÁü•Êä•Êñá','CAS.002.002':'Á•®ÊçÆ‰∏öÂä°ËµÑÈáëÊ∏ÖÁÆóÊéíÈòüÈÄöÁü•Êä•Êñá','CAS.003.002':'Á•®ÊçÆ‰∏öÂä°ÁªìÁÆóÁä∂ÊÄÅÊü•ËØ¢Áî≥ËØ∑Êä•Êñá','CAS.004.002':'Á•®ÊçÆ‰
 ∏öÂä°ÁªìÁÆóÁä∂ÊÄÅÊü•ËØ¢Â∫îÁ≠îÊä•Êñá','CAS.005.002':'Á•®‰∫§ÊâÄËµÑÈáëË¥¶Êà∑Ê∏ÖÁÆóÊéíÈòüÊü•ËØ¢Áî≥ËØ∑Êä•Êñá','CAS.006.002':'Á•®‰∫§ÊâÄËµÑÈáëË¥¶Êà∑Ê∏ÖÁÆóÊéíÈòüÊü•ËØ¢Â∫îÁ≠îÊä•Êñá','CAS.007.002':'Á•®‰∫§ÊâÄËµÑÈáëË¥¶Êà∑Ê∏ÖÁÆóÊéíÈòüÁÆ°ÁêÜÁî≥ËØ∑Êä•Êñá','CAS.008.002':'Á•®‰∫§ÊâÄËµÑÈáëË¥¶Êà∑Áä∂ÊÄÅÂèòÊõ¥ÈÄöÁü•Êä•Êñá','CAS.009.002':'Á•®‰∫§ÊâÄËµÑÈáëË¥¶Êà∑‰ø°ÊÅØÊü•ËØ¢Áî≥ËØ∑Êä•Êñá','CAS.010.002':'Á•®‰∫§ÊâÄËµÑÈáëË¥¶Êà∑‰ø°ÊÅØÊü•ËØ¢Â∫îÁ≠îÊä•Êñá','CAS.011.002':'Á•®‰∫§ÊâÄËµÑÈáëË¥¶Êà∑Âá∫ÈáëÁî≥ËØ∑Êä•Êñá','CAS.012.002':'ËµÑÈáëË¥¶Êà∑‰ΩôÈ¢ùÂèòÂä®ÈÄöÁü•Êä•Êñá','CAS.014.001':'ÊâπÈáèÊ∏ÖÁÆóÊòéÁªÜÈÄöÁü•Êä•Êñá','CAS.015.001':'ËµÑÈáëÊ∏ÖÁÆóË°åÊâ£Ê¨æÁ°ÆËÆ§Áî≥ËØ∑Êä•Êñá','CIM.001.002':'ÈÄöÁî®‰∏öÂä°Á°ÆËÆ§Êä•Êñá','CIM.002.002':'ÈÄöÁî®‰∏öÂä°Êí§ÈîÄÊä•Êñá','CIM.003.002':'ÈÄöÁî®‰∏öÂä°ËΩ¨ÂèëÊä•Êñá','CIM.004.002':'ÈÄöÁî®‰∏öÂä°Â∫îÁ≠îÊä•Êñá','CIM.006.002':'ÂΩ±ÂÉè‰∏ä‰º†Áî≥ËØ∑Êä•Êñá','CIM.008.002':'ÂΩ±ÂÉèÊü•ËØ¢Áî≥ËØ∑Êä•Êñá','CIM.009.002':'ÂΩ±ÂÉèÊü•ËØ¢Â∫îÁ≠îÊä•Êñá','CIM.012.002':'ÈôÑ‰ª∂‰∏ä‰º†Áî≥ËØ∑Êä•Êñá','CIM.014.002':'ÈôÑ‰ª∂Êü•ËØ¢Áî≥
 ËØ∑Êä•Êñá','CIM.015.002':'ÈôÑ‰ª∂Êü•ËØ¢Â∫îÁ≠îÊä•Êñá','CIM.017.002':'ÂÜçË¥¥Áé∞Ë°•ÂÖÖÁôªËÆ∞/‰øÆÊîπÁî≥ËØ∑Êä•Êñá','CIM.018.001':'ÈÄöÁî®‰∏öÂä°ÈÄöÁü•','CIM.019.001':'ÈÄöÁî®Á•®ÊçÆÁä∂ÊÄÅÂèòÊõ¥ÈÄöÁü•','CIM.023.001':'Á•®ÊçÆ‰ø°ÊÅØÁª¥Êä§Áî≥ËØ∑','CIM.024.001':'Á•®ÊçÆ‰ø°ÊÅØÊü•ËØ¢Áî≥ËØ∑','CIM.025.001':'Á•®ÊçÆËØ¶ÁªÜ‰ø°ÊÅØ‰∏ãÂèë','CIM.027.001':'Á•®ÊçÆÊü•È™åÁî≥ËØ∑','CIM.031.001':'Ë¥∏Êòì‰ø°ÊÅØÁôªËÆ∞Áî≥ËØ∑Êä•Êñá','CIM.032.001':'Ë¥∏Êòì‰ø°ÊÅØÊü•ËØ¢Áî≥ËØ∑Êä•Êñá','CIM.033.001':'Ë¥∏Êòì‰ø°ÊÅØÊü•ËØ¢Â∫îÁ≠îÊä•Êñá','CCM.001.002':'Ëê•‰∏öÊó•Ë∞ÉÊï¥ÈÄöÁü•Êä•Êñá','CCM.002.002':'Âü∫Á°ÄÊï∞ÊçÆÂèòÊõ¥ÈÄöÁü•Êä•Êñá','CCM.003.002':'ÊîØ‰ªòÁ≥ªÁªüË°åÂêçË°åÂè∑ÂèòÊõ¥ÈÄöÁü•Êä•Êñá','CCM.004.002':'Á≥ªÁªüÁä∂ÊÄÅÂèòÊõ¥ÈÄöÁü•Êä•Êñá','CCM.005.002':'ÁôªÂΩï/ÈÄÄÂá∫Áî≥ËØ∑Êä•Êñá','CCM.006.002':'ÁôªÂΩï/ÈÄÄÂá∫Â∫îÁ≠îÊä•Êñá','CCM.007.002':'Âº∫Âà∂ÈÄÄÂá∫ÁôªÂΩïÈÄöÁü•Êä•Êñá','CCM.008.002':'Ëá™Áî±Ê†ºÂºè‰ø°ÊÅØÊä•Êñá','CCM.009.002':'‰∏öÂä°Êü•ËØ¢Êä•Êñá','CCM.010.002':'‰∏öÂä°Êü•Â§çÊä•Êñá','CCM.011.002':'Êä•ÊñáÊ†∏ÂØπÊòéÁªÜÁî≥ËØ∑Êä•Êñá','CCM.012.002':'Êä•Êñá
 Ê†∏ÂØπÊòéÁªÜÂ∫îÁ≠îÊä•Êñá','CCM.013.002':'Êï∞Â≠óËØÅ‰π¶ÁªëÂÆöÈÄöÁü•Êä•Êñá','CCM.014.002':'ÊïÖÈöúÈÄöÁü•Êä•Êñá','SDN.001.002':'Á•®ÊçÆÂ≠òÊâò‰ø°ÊÅØËΩ¨ÂèëÊä•Êñá','SDN.002.002':'Á•®ÊçÆÂ≠òÊâòÂ∫îÁ≠îÁî≥ËØ∑Êä•Êñá','SDN.003.002':'Á•®ÊçÆÂ≠òÊâòÈÄÄÁ•®Áî≥ËØ∑Êä•Êñá','SDN.004.002':'Â≠òÊâòÈÄÄÁ•®ÈÄöÁü•Êä•Êñá','SDN.005.002':'‰∫ßÂìÅÂàõËÆæÁªìÊûúÈÄöÁü•Êä•Êñá','SDN.006.002':'Á•®ÊçÆÂ≠òÊâòÁî≥ËØ∑Êä•Êñá','CPP.001.002':'Ë¥¥Áé∞Áî≥ËØ∑‰∫∫‰ø°ÊÅØÁôªËÆ∞Áª¥Êä§Áî≥ËØ∑Êä•Êñá','CPP.002.002':'Ë¥¥Áé∞Áî≥ËØ∑‰∫∫ÁôªËÆ∞Ëß£Èô§Áî≥ËØ∑Êä•Êñá','CPP.003.001':'Ë¥¥Áé∞ÂßîÊâò‰ø°ÊÅØÁôªËÆ∞Áî≥ËØ∑Êä•Êñá','CPP.004.001':'Ë¥¥Áé∞ÂßîÊâòËß£Èô§ÁôªËÆ∞Áî≥ËØ∑Êä•Êñá','CPP.005.001':'Ë¥¥Áé∞ÂßîÊâòÂ§±ÊïàÈÄöÁü•Êä•Êñá','CPP.006.002':'Ë¥¥Áé∞Áî≥ËØ∑‰∫∫‰ø°ÊÅØÊü•ËØ¢Áî≥ËØ∑Êä•Êñá','CPP.007.002':'Ë¥¥Áé∞Áî≥ËØ∑‰∫∫‰ø°ÊÅØÊü•ËØ¢Â∫îÁ≠îÊä•Êñá','CPP.008.001':'Ë¥¥Áé∞ÂßîÊâò‰ø°ÊÅØÊü•ËØ¢Áî≥ËØ∑Êä•Êñá','CPP.009.001':'Ë¥¥Áé∞ÂßîÊâò‰ø°ÊÅØÊü•ËØ¢Â∫îÁ≠îÊä•Êñá','CPP.010.002':'Ë¥¥Áé∞ÂØπËØùÊä•‰ª∑ÂèëÈÄÅ‰øÆÊîπÁî≥ËØ∑Êä•Êñá','CPP.011.002':'Ë¥¥Áé∞ÂØπËØùÊä•‰ª∑ËΩ¨ÂèëÊä•Êñá','CPP.012.002':'Ë¥¥Áé∞ÂØπ
 ËØùÊä•‰ª∑Â∫îÁ≠îÊä•Êñá','CPP.014.002':'Ë¥¥Áé∞ÊåÇÁâåËØ¢‰ª∑ÂèëÈÄÅÁî≥ËØ∑Êä•Êñá','CPP.015.002':'Ë¥¥Áé∞ÊåÇÁâåËØ¢‰ª∑ËΩ¨ÂèëÊä•Êñá','CPP.016.002':'Ë¥¥Áé∞ÊëòÁâåÈÄöÁü•Êä•Êñá','CPP.017.002':'Ë¥¥Áé∞ÊåÇÁâåËØ¢‰ª∑Êí§ÈîÄÊä•Êñá','CPP.018.002':'Ë¥¥Áé∞ÊåÇÁâåËØ¢‰ª∑Â∫îÁ≠îÊä•Êñá','CPP.019.002':'Ë¥¥Áé∞‰∏öÂä°Áä∂ÊÄÅÊõ¥Êñ∞ÈÄöÁü•Êä•Êñá','CPP.020.002':'Ë¥¥Áé∞ÊÑèÂêëÊàê‰∫§ÈÄöÁü•Êä•Êñá','CPP.021.002':'Ë¥¥Áé∞‰∏öÂä°‰∫§ÊòìÁ°ÆËÆ§Êä•Êñá','CPP.022.002':'Ë¥¥Áé∞ÁªìÁÆóÁªìÊûúÈÄöÁü•Êä•Êñá','CPP.023.001':'Ë¥¥Áé∞Áî≥ËØ∑‰∫∫Âú®Á∫øÁ≠æÁ∫¶ÈúÄÊ±ÇÈÄöÁü•Êä•Êñá','CPP.024.001':'Ë¥¥Áé∞Áî≥ËØ∑‰∫∫Âú®Á∫øÁ≠æÁ∫¶Áî≥ËØ∑Êä•Êñá','CPP.025.001':'Ë¥¥Áé∞Áî≥ËØ∑‰∫∫Âú®Á∫øÁ≠æÁ∫¶Â∫îÁ≠îÊä•Êñá','CPP.026.001':'Âú®Á∫øÁ≠æÁ∫¶Áä∂ÊÄÅÊü•ËØ¢Áî≥ËØ∑Êä•Êñá','CPP.027.001':'Âú®Á∫øÁ≠æÁ∫¶Áä∂ÊÄÅÊü•ËØ¢Â∫îÁ≠îÊä•Êñá','CPP.028.001':'Âú®Á∫øÁ≠æÁ∫¶Áä∂ÊÄÅÈÄöÁü•Êä•Êñá','CPP.029.001':'Ë¥¥Áé∞ÈÄö‰∏ìÁî®ËΩ¨ÂèëÊä•Êñá','CPP.030.002':'Ë¥¥Áé∞ÊÑèÂêëËØ¢‰ª∑ÂèëÈÄÅ‰øÆÊîπÁî≥ËØ∑Êä•Êñá','CPP.031.002':'Ë¥¥Áé∞ÊÑèÂêëËØ¢‰ª∑ËΩ¨ÂèëÊä•Êñá','CPP.032.002':'Ë¥¥Áé∞ÊÑèÂêëËØ¢‰ª∑Â∫îÁ≠îÊä•Êñá','CPP.033.002':'Ë¥¥Áé∞
 ÊÑèÂêëËØ¢‰ª∑Êí§ÈîÄÊä•Êñá','PAY.001.001':'‰ºÅ‰∏ö‰ø°ÊÅØÁ≠æÁ∫¶/Ëß£Á∫¶Áî≥ËØ∑Êä•Êñá','PAY.002.001':'Á∫ø‰∏äÁ•®ÊçÆÊîØ‰ªòÂèëËµ∑Áî≥ËØ∑Êä•Êñá','PAY.003.001':'Á∫ø‰∏äÁ•®ÊçÆÊîØ‰ªòÂèëËµ∑Â∫îÁ≠îÊä•Êñá','PAY.004.001':'Á∫ø‰∏äÁ•®ÊçÆÊîØ‰ªòÊµÅÊ∞¥ÈÄöÁü•Êä•Êñá','PAY.005.001':'Á∫ø‰∏äÁ•®ÊçÆÊîØ‰ªòË∑≥ËΩ¨Áî≥ËØ∑Êä•Êñá','PAY.006.001':'Á∫ø‰∏äÁ•®ÊçÆÊîØ‰ªòË∑≥ËΩ¨Â∫îÁ≠îÊä•Êñá','PAY.007.001':'Á∫ø‰∏äÁ•®ÊçÆÈîÅÂÆö/Ëß£ÈîÅÁî≥ËØ∑Êä•Êñá','PAY.008.001':'Á∫ø‰∏äÁ•®ÊçÆÊîØ‰ªòÁªìÊûúÈÄöÁü•Êä•Êñá','PAY.009.001':'Á∫ø‰∏äÁ•®ÊçÆÊîØ‰ªòÊµÅÊ∞¥Êü•ËØ¢Áî≥ËØ∑Êä•Êñá','PAY.010.001':'Á∫ø‰∏äÁ•®ÊçÆÊîØ‰ªòÊµÅÊ∞¥Êõ¥Êñ∞Áî≥ËØ∑Êä•Êñá','PAY.011.001':'Á∫ø‰∏äÁ•®ÊçÆÊîØ‰ªòÁä∂ÊÄÅÊü•ËØ¢Áî≥ËØ∑Êä•Êñá','PAY.012.001':'Á∫ø‰∏äÁ•®ÊçÆÊîØ‰ªòÁä∂ÊÄÅÊü•ËØ¢Â∫îÁ≠îÊä•Êñá','PAY.013.001':'ËÆ¢ÂçïÈôÑÂä†‰ø°ÊÅØ‰∏ä‰º†Áî≥ËØ∑Êä•Êñá','CHS.001.002':'Á•®ÊçÆÊúâÂÅøÊúçÂä°Ë¥π‰ø°ÊÅØÈÄöÁü•Êä•Êñá','CHS.002.002':'Á•®ÊçÆÊúâÂÅøÊúçÂä°Ë¥πÊâ£Êî∂ÁªìÊûúÈÄöÁü•Êä•Êñá','CHS.003.002':'Á•®ÊçÆÊúâÂÅøÊúçÂä°Ë¥πÊâ£Ë¥πÁä∂ÊÄÅÊü•ËØ¢Áî≥ËØ∑Êä•Êñá','CHS.004.002':'Á•®ÊçÆÊúâÂÅøÊúçÂä°Ë¥πÊâ£Ë¥πÁä∂ÊÄÅÊü•ËØ¢Â∫îÁ≠îÊä•Êñá',}
        self.xml_filed_mean={'CD000001':'99.9999','CD000002':'0','CD000003':'365','CD000004':'365','CD000005':'ACT/360','CD000006':'200','CD000007':'100','CD000008':'5','CD000009':'-5','CD000010':'30','CD000011':'1000','CD000012':'1000000','CD000013':'1000','CD000014':'99.9999','CD000015':'0','CD000016':'0.01','CD000001':'0.333333333333333','CD000002':'0.875','CD000003':'0.354166666666667','CD000004':'0.875','CD000005':'0.375','CD000006':'0.5','CD000007':'0.5625','CD000008':'0.6875','CD000009':'0.375','CD000010':'0.5','CD000011':'0.5625','CD000012':'0.6875','CD000013':'0.375','CD000014':'0.5','CD000015':'0.5625','CD000016':'0.6875','CD000017':'0.375','CD000018':'0.5','CD000019':'0.5625','CD000020':'0.791666666666667','CD000021':'0.375','CD000022':'0.5','CD000023':'0.5625','CD000024':'0.791666666666667','CD000025':'0.375','CD000026':'0.5','CD000027':'0.5625','CD000028':'0.791666666666667','CD000029':'0.333333333333333','CD000030':'0.875','CD000031':'0.375','CD000032':'0.70833333333333
 3','CD000033':'0.333333333333333','CD000034':'0.875','CD000035':'0.333333333333333','CD000036':'0.875','CD000037':'0.694444444444445','CD000039':'0.707638888888889','CD000040':'0.375','CD000041':'0.9375','CD000042':'0.6875','CD000043':'0.6875','CD000044':'0.6875','CD000045':'0.6875','CD000046':'0.6875','CD000047':'0.6875','CD000048':'0.6875','CD000049':'0.6875','CD000050':'0.6875','CD000051':'0.6875','CD000052':'0.375','CD000053':'0.5','CD000054':'0.5','CD000055':'0.697916666666667','CD000056':'0.375','CD000057':'0.5','CD000058':'0.5','CD000059':'0.697916666666667','CD000060':'0.375','CD000061':'0.5','CD000062':'0.5625','CD000063':'0.697916666666667','CD000064':'0.375','CD000065':'0.5','CD000066':'0.5625','CD000067':'0.677083333333333','CD000068':'0.333333333333333','CD000069':'0.875','CD000070':'0.333333333333333','CD000071':'0.833333333333333','CD000072':'0.6875','CD000073':'0.6875','CD000074':'0.6875','CD000075':'0.6875','CD000076':'0.6875','CD000079':'0.6875','CD000080':'0.6875'
 ,'CD000081':'0.718055555555556','CD000082':'0.718055555555556','CD000083':'0.718055555555556','CD000084':'0.826388888888889','CD000085':'0.718055555555556','CD000086':'0.826388888888889','CD000087':'0.718055555555556','CD000088':'0.826388888888889','CD000089':'0.718055555555556','CD000090':'0.826388888888889','CD000091':'0.718055555555556','CD000092':'0.826388888888889','11':'Âåó‰∫¨','12':'Â§©Ê¥•','31':'‰∏äÊµ∑','50':'ÈáçÂ∫Ü','13':'Ê≤≥Âåó','14':'Â±±Ë•ø','21':'ËæΩÂÆÅ','22':'ÂêâÊûó','23':'ÈªëÈæôÊ±ü','32':'Ê±üËãè','33':'ÊµôÊ±ü','34':'ÂÆâÂæΩ','35':'Á¶èÂª∫','36':'Ê±üË•ø','37':'Â±±‰∏ú','41':'Ê≤≥Âçó','42':'ÊπñÂåó','43':'ÊπñÂçó','44':'Âπø‰∏ú','46':'Êµ∑Âçó','51':'ÂõõÂ∑ù','52':'Ë¥µÂ∑û','53':'‰∫ëÂçó','61':'ÈôïË•ø','62':'ÁîòËÇÉ','63':'ÈùíÊµ∑','15':'ÂÜÖËíôÂè§','45':'ÂπøË•ø','54':'Ë•øËóè','64':'ÂÆÅÂ§è','65':'Êñ∞ÁñÜ','81':'È¶ôÊ∏Ø','82':'Êæ≥Èó®','71':'Âè∞Êπæ','1':'‰∏≠Â§ÆÈì∂Ë°å','2':'Èì∂Ë°å‰∏öÊú∫ÊûÑ','3':'ÈùûÈì∂Ë°åÈáëËûçÊú∫ÊûÑ','4':'ÈùûÊ≥ï‰∫∫‰∫ßÂìÅ','5':'ËôöÊãüËµÑÁÆ°ÂèÇ‰∏éËÄÖ','6':'ÈùûÈáëËûçÊú∫ÊûÑ','
 7':'Â≠òÊâòÁ±ªÈùûÊ≥ï‰∫∫‰∫ßÂìÅ','8':'Â≠òÊâòÁ±ªËôöÊãüÁ≥ªÁªüÂèÇ‰∏éËÄÖ','101':'‰∏≠ÂõΩ‰∫∫Ê∞ëÈì∂Ë°å','201':'ÊîøÁ≠ñÊÄßÈì∂Ë°å','202':'ÂõΩÊúâÂïÜ‰∏öÈì∂Ë°å','203':'ËÇ°‰ªΩÂà∂ÂïÜ‰∏öÈì∂Ë°å','204':'Â§ñËµÑÈì∂Ë°å','205':'ÂüéÂ∏ÇÂïÜ‰∏öÈì∂Ë°å','206':'ÂÜúÂïÜË°åÂíåÂÜúÂêàË°å','207':'ÊùëÈïáÈì∂Ë°å','208':'ÂÜúÊùë‰ø°Áî®Á§æ','209':'Ê∞ëËê•Èì∂Ë°å','301':'Ë¥¢Âä°ÂÖ¨Âè∏','302':'‰ø°ÊâòÊäïËµÑÂÖ¨Âè∏','303':'‰øùÈô©ÂÖ¨Âè∏','304':'ËØÅÂà∏ÂÖ¨Âè∏','305':'Âü∫ÈáëÂÖ¨Âè∏','306':'ÈáëËûçËµÑ‰∫ßÁÆ°ÁêÜÂÖ¨Âè∏','307':'ÁßÅÂãüÂü∫ÈáëÂÖ¨Âè∏','308':'Ê±ΩËΩ¶ÈáëËûçÂÖ¨Âè∏','309':'‰øùÈô©ÂÖ¨Âè∏ÁöÑËµÑ‰∫ßÁÆ°ÁêÜÂÖ¨Âè∏','310':'ËØÅÂà∏ÂÖ¨Âè∏ÁöÑËµÑ‰∫ßÁÆ°ÁêÜÂÖ¨Âè∏','311':'Âü∫ÈáëÂÖ¨Âè∏ÁöÑËµÑ‰∫ßÁÆ°ÁêÜÂÖ¨Âè∏','401':'ÂïÜ‰∏öÈì∂Ë°åÁêÜË¥¢‰∫ßÂìÅ','402':'ËØÅÂà∏ÂÖ¨Âè∏ÁöÑËµÑ‰∫ßÁÆ°ÁêÜ‰∫ßÂìÅ','403':'‰ø°ÊâòÂÖ¨Âè∏ÈáëËûç‰∫ßÂìÅ','404':'‰øùÈô©ÂÖ¨Âè∏ÁöÑ‰øùÈô©‰∫ßÂìÅ','405':'‰øùÈô©ËµÑ‰∫ßÁÆ°ÁêÜÂÖ¨Âè∏ÁöÑËµÑÁÆ°‰∫ßÂìÅ','406':'Âü∫Èáë','407':'ÁßÅÂãüÂü∫Èáë','408':'Âü∫ÈáëÂÖ¨Âè∏ÁöÑÁâπÂÆöÂÆ¢Êà∑ËµÑ‰∫ßÁÆ°ÁêÜ‰∏öÂä°','409':'Á§æ‰øùÂü∫Èáë','410':'ÂÖ∂‰ªñÂü∫Èáë','411':'ÂÖ∂‰ªñÈùûÊ≥ï‰∫∫‰∫ßÂìÅ',
 '412':'ËØÅÂà∏ËµÑÁÆ°ÂÖ¨Âè∏ÁöÑËµÑÁÆ°‰∫ßÂìÅ','413':'Âü∫ÈáëËµÑÁÆ°ÂÖ¨Âè∏ÁöÑËµÑÁÆ°‰∫ßÂìÅ','501':'ÂïÜ‰∏öÈì∂Ë°åËµÑÁÆ°','502':'ËØÅÂà∏ÂÖ¨Âè∏ËµÑÁÆ°','503':'Âü∫ÈáëÂÖ¨Âè∏ËµÑÁÆ°','504':'Âü∫ÈáëÂ≠êÂÖ¨Âè∏ËµÑÁÆ°','505':'ÁßÅÂãüÂü∫ÈáëÂÖ¨Âè∏ËµÑÁÆ°','506':'‰ø°ÊâòËµÑÁÆ°','507':'‰øùÈô©ÂÖ¨Âè∏ËµÑÁÆ°','508':'‰øùÈô©ËµÑÁÆ°ÂÖ¨Âè∏ËµÑÁÆ°','509':'Á§æ‰øùÂü∫ÈáëËµÑÁÆ°','510':'ÂÖ∂‰ªñËµÑÁÆ°','511':'ËØÅÂà∏ËµÑÁÆ°ÂÖ¨Âè∏ËµÑÁÆ°','601':'Á§æ‰øùÂü∫ÈáëÁêÜ‰∫ã‰ºö','602':'ÂÖ¨ÁßØÈáë‰∏≠ÂøÉ','603':'Â∞èÈ¢ùË¥∑Ê¨æÂÖ¨Âè∏','604':'ËûçËµÑÁßüËµÅÂÖ¨Âè∏','605':'ÂÖ∂‰ªñÈùûÈáëËûçÊú∫ÊûÑ','701':'ÂõΩÊúâÂïÜ‰∏öÈì∂Ë°åÂ≠òÊâò‰∫ßÂìÅ','702':'ËÇ°‰ªΩÂà∂ÂïÜ‰∏öÈì∂Ë°åÂ≠òÊâò‰∫ßÂìÅ','703':'Â§ñËµÑÈì∂Ë°åÂ≠òÊâò‰∫ßÂìÅ','704':'ÂüéÂ∏ÇÂïÜ‰∏öÈì∂Ë°åÂ≠òÊâò‰∫ßÂìÅ','705':'Ê∞ëËê•Èì∂Ë°åÂ≠òÊâò‰∫ßÂìÅ','706':'ÂÜúÂïÜË°åÂíåÂÜúÂêàË°åÂ≠òÊâò‰∫ßÂìÅ','707':'ÂÖ∂‰ªñÂÜúÊùëÈáëËûçÊú∫ÊûÑÂ≠òÊâò‰∫ßÂìÅ','708':'ËØÅÂà∏ÂÖ¨Âè∏Â≠òÊâò‰∫ßÂìÅ','709':'ÂÖ∂‰ªñÂ≠òÊâò‰∫ßÂìÅ','801':'ÂõΩÊúâÂïÜ‰∏öÈì∂Ë°åÂ≠òÊâò','802':'ËÇ°‰ªΩÂà∂ÂïÜ‰∏öÈì∂Ë°åÂ≠òÊâò','803':'Â§ñËµÑÈì∂Ë°åÂ≠òÊâò','804':'ÂüéÂ∏ÇÂïÜ‰∏öÈì∂Ë°åÂ≠òÊâò','805':'
 Ê∞ëËê•Èì∂Ë°åÂ≠òÊâò','806':'ÂÜúÂïÜË°åÂíåÂÜúÂêàË°åÂ≠òÊâò','807':'ÂÖ∂‰ªñÂÜúÊùëÈáëËûçÊú∫ÊûÑÂ≠òÊâò','808':'ËØÅÂà∏ÂÖ¨Âè∏Â≠òÊâò','809':'ÂÖ∂‰ªñÂ≠òÊâò','CD000001':'101|1','CD000002':'201|2','CD000003':'202|2','CD000004':'203|2','CD000005':'204|2','CD000006':'205|2','CD000007':'206|2','CD000008':'207|2','CD000009':'208|2','CD000068':'209|2','CD000010':'301|3','CD000011':'302|3','CD000012':'303|3','CD000013':'304|3','CD000014':'305|3','CD000015':'306|3','CD000016':'307|3','CD000017':'308|3','CD000018':'309|3','CD000019':'310|3','CD000020':'311|3','CD000021':'401|4','CD000022':'402|4','CD000023':'403|4','CD000024':'404|4','CD000025':'405|4','CD000026':'406|4','CD000027':'407|4','CD000028':'408|4','CD000029':'409|4','CD000030':'410|4','CD000031':'411|4','CD000032':'412|4','CD000033':'413|4','CD000034':'501|5','CD000035':'502|5','CD000036':'503|5','CD000037':'504|5','CD000038':'505|5','CD000039':'506|5','CD000040':'507|5','CD000041':'508|5','CD000042':'509|5','CD000043':'510|5','CD000044':'511|5'
 ,'CD000045':'601|6','CD000046':'602|6','CD000047':'603|6','CD000048':'604|6','CD000049':'605|6','CD000050':'701|7','CD000051':'702|7','CD000052':'703|7','CD000053':'704|7','CD000054':'705|7','CD000055':'706|7','CD000056':'707|7','CD000057':'708|7','CD000058':'709|7','CD000059':'801|8','CD000060':'802|8','CD000061':'803|8','CD000062':'804|8','CD000063':'805|8','CD000064':'806|8','CD000065':'807|8','CD000066':'808|8','CD000067':'809|8','1':'201','2':'202','3':'205','4':'203','5':'204','6':'206','7':'207','8':'208','9':'301','CD000001':'10','CD000002':'10','CD000003':'200','CD000008':'300','CD000009':'300','CD000010':'300','CD000004':'200','CD000005':'200','CD000006':'200','CD000007':'200','CD000011':'100','CD000012':'1000000000','CD000001':'2.25','CD000002':'2.25','CD000003':'2.25','CD000004':'2.25','CD000005':'2.25','CD000006':'2.25','CD000007':'2.25','CD000008':'2.25','CD000009':'2.25','CD000010':'2.25','CD000011':'2.25','CD000012':'2.25','CD000013':'2.25','CD000014':'2.25','CD00001
 5':'2.25','CD000016':'2.25','201':'ST01','202':'ST01','203':'ST01','204':'ST01','205':'ST01','206':'ST01','207':'ST01','208':'ST01','301':'ST01','TM001':'ST01','TM007':'ST01','TM014':'ST01','TM030':'ST01','TM090':'ST01','TM180':'ST01','TM270':'ST01','TM360':'ST01','CD000001':'0','CD000002':'99.9999','CD000003':'0.0001','MT01':'Èì∂Ë°å','MT02':'ÈùûÈì∂Ë°å','MT03':'ËµÑÁÆ°Á±ª','MT04':'Â≠òÊâòÁ±ª','MT05':'‰æõÂ∫îÈìæÂπ≥Âè∞','MT06':'B2BÂπ≥Âè∞','BC01':'Âá∫Á•®‰ø°ÊÅØÁôªËÆ∞','BC02':'ÊèêÁ§∫ÊâøÂÖëÁî≥ËØ∑','BC03':'ÊèêÁ§∫Êî∂Á•®Áî≥ËØ∑','BC04':'‰øùËØÅÁî≥ËØ∑','BC05':'‰øùË¥¥Â¢û‰ø°','BC06':'‰øùÂÖëÂ¢û‰ø°','BC07':'ËΩ¨ËÆ©ËÉå‰π¶Áî≥ËØ∑','BC08':'‰π∞Êñ≠ÂºèË¥¥Áé∞','BC09':'ÂõûË¥≠ÂºèË¥¥Áé∞','BC10':'Ë¥¥Áé∞ÂõûË¥≠ËµéÂõûÁî≥ËØ∑','BC11':'Ë¥®ÊäºÁî≥ËØ∑','BC12':'Ë¥®ÊäºËß£Èô§Áî≥ËØ∑','BC13':'ÊèêÁ§∫‰ªòÊ¨æ','BC14':'Êãí‰ªòËøΩÁ¥¢','BC15':'ÈùûÊãí‰ªòËøΩÁ¥¢','BC16':'ËøΩÁ¥¢ÂêåÊÑèÊ∏ÖÂÅøÁî≥ËØ∑','BC17':'ÂÜªÁªìÔºàËß£Èô§ÔºâÁôªËÆ∞','BC18':'‰∏çÂæóËΩ¨ËÆ©Êí§ÈîÄ','BC19':'Êí§Á•®Áî≥ËØ∑','BC20':'Á•®ÊçÆÊü•È™å','BC21':'Â≠òÊâò','BC22':'‰øùËØÅÂ¢û‰ø°Áî
 ≥ËØ∑','BC23':'ECDSÁîµÁ•®ËøÅÁßª','BC24':'ËΩ¨Ë¥¥Áé∞','BC25':'Ë¥®ÊäºÂºèÂõûË¥≠È¶ñÊúü','BC26':'Ë¥®ÊäºÂºèÂõûË¥≠ÊèêÂâçËµéÂõû','BC27':'Ë¥®ÊäºÂºèÂõûË¥≠Âà∞ÊúüËµéÂõû','BC28':'Ë¥®ÊäºÂºèÂõûË¥≠ÈÄæÊúüËµéÂõû','BC29':'‰π∞Êñ≠ÂºèÂõûË¥≠È¶ñÊúü','BC30':'‰π∞Êñ≠ÂºèÂõûË¥≠ËµéÂõû','BC31':'ÂÜçË¥¥Áé∞Ë¥®ÊäºÂºèÂõûË¥≠È¶ñÊúü','BC32':'ÂÜçË¥¥Áé∞Ë¥®ÊäºÂºèÂõûË¥≠ÊèêÂâçËµéÂõû','BC33':'ÂÜçË¥¥Áé∞Ë¥®ÊäºÂºèÂõûË¥≠Âà∞ÊúüËµéÂõû','BC34':'ÂÜçË¥¥Áé∞Ë¥®ÊäºÂºèÂõûË¥≠ÈÄæÊúüËµéÂõû','BC35':'Èùû‰∫§ÊòìËøáÊà∑','BC36':'ÊâøÂÖë‰ø°ÊÅØÁôªËÆ∞','BC37':'Ë¥¥Áé∞‰ø°ÊÅØÁôªËÆ∞','BC38':'‰øùËØÅ‰ø°ÊÅØÁôªËÆ∞','BC39':'Ë¥®Êäº‰ø°ÊÅØÁôªËÆ∞','BC40':'Ë¥®ÊäºËß£Èô§‰ø°ÊÅØÁôªËÆ∞','BC41':'Ê≠¢‰ªòÔºàËß£Èô§ÔºâÁôªËÆ∞','BC42':'ËΩ¨ÊâòÁÆ°ÔºàÁ•®ÊçÆË¥¶Êà∑Ôºâ','BC43':'ÂÜçË¥¥Áé∞‰π∞Êñ≠','NT01':'Ëá™Âä®ÊèêÁ§∫‰ªòÊ¨æÂèëËµ∑   ','NT02':'Ëá™Âä®ÂΩ±ÂÉè‰ªòÊ¨æÁ°ÆËÆ§ÂèëËµ∑','NT03':'Ëá™Âä®Â∫ìÂ≠òÈÄÄÁ•®Áî≥ËØ∑  ','NT04':'Ëá™Âä®‰ªòÊ¨æÁ°ÆËÆ§Â∫îÁ≠î  ','NT05':'Ëá™Âä®ÊèêÁ§∫‰ªòÊ¨æÂ∫îÁ≠î   ','NT06':'Âà∞ÊúüÊ∏ÖÈÄÄ','NT07':'Êó•ÁªàÊ∏ÖÈÄÄ','NT08':'Á•®ÊçÆÁªìÊùüÊ∏ÖÈÄÄ','NT09':'ÊèêÂâçËµéÂõûÁî≥ËØ∑Âú∫Âä°ÂÆ°Ê†∏Ê
 ãíÁªùÁªìÊûú','NT10':'‰æõÂ∫îÈìæÂπ≥Âè∞‰∏öÂä°ÈÄöÁü•','NT11':'ËµÑÈáëÊ∏ÖÁÆóË°åÂ§ÑÁêÜÁªìÊûú','NT12':'Ë¥¥ÂÖ•Ë°åÂäûÁêÜÈÄöÁü•','AR01':'Á•®ÊçÆ‰ΩúÂ∫ü       ','AR02':'Êú™Áî®ÈÄÄÂõû       ','AR03':'Á•®ÊçÆÊùÉÂà©Â∑≤ÈÄæÂ§±ÊïàÊó•      ','AR04':'Á•®ÊçÆËøΩÂÅøÊ∏ÖÂÅøÁªìÊûú     ','AR05':'Â¢ûÂä†‰øùËØÅ‰∫∫     ','AR06':'Á•®ÊçÆ‰∏çÂæóËΩ¨ËÆ©Êí§ÈîÄ     ','AR07':'Á•®ÊçÆÊàñÊúâËøΩÂÅø      ','AR09':'Á•®ÊçÆÂÜªÁªì/ÂÜªÁªìËß£Èô§ÁôªËÆ∞    ','AR10':'Âú∫Âä°Áä∂ÊÄÅÂèòÊõ¥       ','AR11':'ÂõûË¥≠ÂºèË¥¥Áé∞Â∑≤ÈÄæËµéÂõûÊà™Ê≠¢Êó•','AR12':'Âú∫Âä°ÊùÉÂ±ûÂèòÊõ¥','AR13':'Á•®‰ªòÈÄöÁ•®ÊçÆÈîÅÂÆö','AR14':'Ë¥¥Áé∞ÈÄöÁ•®ÊçÆÈîÅÂÆö','AR15':'Ë¥¥Áé∞ÈÄöÊùÉÂ±ûËøáÊà∑','ET01':'ÊâøÂÖë','ET02':'‰øùËØÅ','ET03':'Ë¥®Êäº','ET04':'Ë¥®ÊäºËß£Èô§','ET05':'ËΩ¨ËÆ©ËÉå‰π¶','ET06':'Ê≠¢‰ªò/ÂÜªÁªì','ET07':'Ëß£Èô§Ê≠¢‰ªò/ÂÜªÁªì','ET08':'‰øùËØÅÂ¢û‰ø°','ET09':'ÊèêÁ§∫‰ªòÊ¨æ','ET10':'ËøΩÁ¥¢','ET11':'ÁîµÁ•®ËΩ¨ÂÖ•','ET12':'ËΩ¨ÊâòÁÆ°','ET13':'‰π∞Êñ≠ÂºèÂõûË¥≠','ET14':'ÂõûË¥≠ÂºèË¥¥Áé∞','ET15':'ÂõûË¥≠ÂºèË¥¥Áé∞ËµéÂõû','ET17':'‰π∞Êñ≠ÂºèÂõûË¥≠ËµéÂõû','ET18':'ÊùÉÂ±ûÂàùÂßãÁôªËÆ∞','ET1
 9':'Ë¥®ÊäºÂºèÂõûË¥≠','ET20':'Ë¥®ÊäºÂºèÂõûË¥≠ËµéÂõû','ET21':'ÂÜçË¥¥Áé∞Ë¥®ÊäºÂºèÂõûË¥≠','ET22':'ÂÜçË¥¥Áé∞Ë¥®ÊäºÂºèÂõûË¥≠ËµéÂõû','CD000001':'BC02|ET01','CD000001':'BC36|ET01','CD000001':'BC04|ET02','CD000001':'BC38|ET02','CD000001':'BC11|ET03','CD000001':'BC39|ET03','CD000001':'BC25|ET19','CD000001':'BC31|ET21','CD000001':'BC12|ET04','CD000001':'BC26|ET20','CD000001':'BC27|ET20','CD000001':'BC28|ET20','CD000001':'BC32|ET22','CD000001':'BC33|ET22','CD000001':'BC34|ET22','CD000001':'BC40|ET04','CD000001':'BC07|ET05','CD000001':'BC08|ET05','CD000001':'BC35|ET05','CD000001':'BC37|ET05','CD000001':'BC21|ET05','CD000001':'BC24|ET05','CD000001':'BC43|ET05','CD000001':'BC17|ET06','CD000001':'BC41|ET07','CD000001':'BC03|ET18','CD000001':'BC22|ET08','CD000001':'BC23|ET11','CD000001':'BC29|ET13','CD000001':'BC13|ET09','CD000001':'BC14|ET10','CD000001':'BC15|ET10','CD000001':'BC16|ET10','CD000001':'BC09|ET14','CD000001':'BC10|ET15','CD000001':'BC30|ET17','CD000001':'BC42|ET12','T10002':'Âá∫Èáë','T
 10003':'ÂÖ•Èáë','T10006':'Êî∂ÊÅØ','T10008':'Êî∂Ë¥π','T80000':'Êù•Ë¥¶ÊâãÂ∑•Ê†∏ÂØπ','T90000':'‰∫∫Â∑•Ë∞ÉË¥¶','RE1011':'ËΩ¨Ë¥¥Áé∞','RE1021':'Ë¥®ÊäºÂºèÂõûË¥≠È¶ñÊúü','RE1022':'Ë¥®ÊäºÂºèÂõûË¥≠Âà∞Êúü','RE1023':'Ë¥®ÊäºÂºèÂõûË¥≠ÊèêÂâçËµéÂõû','RE1024':'Ë¥®ÊäºÂºèÂõûË¥≠ÈÄæÊúüËµéÂõû','RE1031':'‰π∞Êñ≠ÂºèÂõûË¥≠È¶ñÊúü','RE1032':'‰π∞Êñ≠ÂºèÂõûË¥≠Âà∞Êúü','RE2011':'ÊâòÊî∂','RE2021':'ËøΩÁ¥¢','RE3011':'ÂÜçË¥¥Áé∞‰π∞Êñ≠','RE3021':'ÂÜçË¥¥Áé∞Ë¥®ÊäºÂºèÂõûË¥≠È¶ñÊúü','RE3022':'ÂÜçË¥¥Áé∞Ë¥®ÊäºÂºèÂõûË¥≠Âà∞Êúü','RE3023':'ÂÜçË¥¥Áé∞Ë¥®ÊäºÂºèÂõûË¥≠ÊèêÂâçËµéÂõû','RE3024':'ÂÜçË¥¥Áé∞Ë¥®ÊäºÂºèÂõûË¥≠ÈÄæÊúüËµéÂõû','RE4011':'‰π∞Êñ≠ÂºèË¥¥Áé∞','RE6011':'Ê†áÂáÜÂåñÁ•®ÊçÆÂ≠òÊâò','RE7011':'ÊâπÈáèÊ∏ÖÁÆó','RE4021':'ÂõûË¥≠ÂºèË¥¥Áé∞','RE4022':'ÂõûË¥≠ÂºèË¥¥Áé∞ËµéÂõû','RE4032':'ÈÄæÊúüÊâòÊî∂','RE4061':'Â§ÆË°åÂçñÁ•®','CD000001':'ST00','1100':'ÊúâÈôêË¥£‰ªªÂÖ¨Âè∏','1200':'ËÇ°‰ªΩÊúâÈôêÂÖ¨Âè∏','2100':'ÊúâÈôêË¥£‰ªªÂÖ¨Âè∏ÂàÜÂÖ¨Âè∏','2200':'ËÇ°‰ªΩÊúâÈôêÂÖ¨Âè∏ÂàÜÂÖ¨Âè∏','3100':'ÂÖ®Ê∞ëÊâÄÊúâÂà∂','3200':'ÈõÜ‰ΩìÊâÄÊúâÂà∂','3300':'ËÇ°‰ªΩÂà∂','3400':'
 ËÇ°‰ªΩÂêà‰ΩúÂà∂','3500':'ËÅîËê•','4100':'‰∫ã‰∏öÂçï‰ΩçËê•‰∏ö','4200':'Á§æÂõ¢Ê≥ï‰∫∫Ëê•‰∏ö','4300':'ÂÜÖËµÑ‰ºÅ‰∏öÊ≥ï‰∫∫ÂàÜÊîØÊú∫ÊûÑ(ÈùûÊ≥ï‰∫∫)','4400':'ÁªèËê•Âçï‰Ωç(ÈùûÊ≥ï‰∫∫)','4500':'ÈùûÂÖ¨Âè∏ÁßÅËê•‰ºÅ‰∏ö','4600':'ËÅîËê•','4700':'ËÇ°‰ªΩÂà∂‰ºÅ‰∏ö(ÈùûÊ≥ï‰∫∫)','5100':'ÊúâÈôêË¥£‰ªªÂÖ¨Âè∏ÔºàÂ§ñÂïÜÊäïËµÑÔºâ','5200':'ËÇ°‰ªΩÊúâÈôêÂÖ¨Âè∏ÔºàÂ§ñÂïÜÊäïËµÑÔºâ','5300':'ÈùûÂÖ¨Âè∏ÔºàÂ§ñÂïÜÊäïËµÑÔºâ','5400':'Â§ñÂïÜÊäïËµÑÂêà‰ºô‰ºÅ‰∏ö','5800':'Â§ñÂïÜÊäïËµÑ‰ºÅ‰∏öÂàÜÊîØÊú∫ÊûÑ','6100':'ÊúâÈôêË¥£‰ªªÂÖ¨Âè∏ÔºàÂè∞„ÄÅÊ∏Ø„ÄÅÊæ≥ËµÑÔºâ','6200':'ËÇ°‰ªΩÊúâÈôêÂÖ¨Âè∏(Âè∞Ê∏ØÊæ≥‰∏éÂ¢ÉÂÜÖÂêàËµÑ)','6300':'ÈùûÂÖ¨Âè∏ÔºàÂè∞„ÄÅÊ∏Ø„ÄÅÊæ≥ËµÑÔºâ','6400':'Ê∏Ø„ÄÅÊæ≥„ÄÅÂè∞ÊäïËµÑÂêà‰ºô‰ºÅ‰∏ö','6800':'Âè∞„ÄÅÊ∏Ø„ÄÅÊæ≥ÊäïËµÑ‰ºÅ‰∏öÂàÜÊîØÊú∫ÊûÑ','7100':'Â§ñÂõΩÔºàÂú∞Âå∫ÔºâÂÖ¨Âè∏ÂàÜÊîØÊú∫ÊûÑ','7200':'Â§ñÂõΩ(Âú∞Âå∫)‰ºÅ‰∏öÂ∏∏È©ª‰ª£Ë°®Êú∫ÊûÑ','7300':'Â§ñÂõΩ(Âú∞Âå∫)‰ºÅ‰∏öÂú®‰∏≠ÂõΩÂ¢ÉÂÜÖ‰ªé‰∫ãÁªèËê•Ê¥ªÂä®','8100':'ÂÜÖËµÑÈõÜÂõ¢','8500':'Â§ñËµÑÈõÜÂõ¢','9100':'ÂÜúÊ∞ë‰∏ì‰∏öÂêà‰ΩúÁªèÊµéÁªÑÁªá','9200':'ÂÜúÊ∞ë‰∏ì‰∏öÂêà‰ΩúÁ§æÂàÜÊîØÊú∫ÊûÑ','9500':'‰∏™‰Ω
 ìÂ∑•ÂïÜÊà∑','9600':'Ëá™ÁÑ∂‰∫∫','9900':'ÂÖ∂‰ªñ','001':'0.416666666666667','002':'0.5','003':'0.583333333333333','001':'','002':'','003':'','001':'','002':'','003':'','001':'RE2011','002':'RE2011','003':'RE2011','001':'ST00','002':'ST00','003':'ST00'}
        self.res={}
        super().__init__()
        self.db_content=[]
        self.set_window()
        self.create_canvas()
        
        
       


    def set_window(self):
        self.title(r"Êï∞ÊçÆÁ≤æÂ∫¶")
        max_width,max_height=self.maxsize()
        align_center="1200x800+%d+%d"%((max_width-1200)/2,(max_height-900)/2)
        self.geometry(align_center)

    def create_canvas(self):
        canvas=Canvas(self,scrollregion=(-1520,-22200,1520,22200),bg='white') #ÂàõÂª∫canvas
        canvas.pack(side=LEFT, fill=BOTH, ipadx=2, ipady=2, expand=1) #    ÊîæÁΩÆcanvasÁöÑ‰ΩçÁΩÆ

        frame_send=Frame(canvas,background='yellow')
        frame_send.pack(side=TOP,fill=NONE,expand=0)

        frame_res=Frame(canvas,background='green') #ÊääframeÊîæÂú®canvasÈáå
        frame_res.pack(side=TOP, fill=NONE, expand=NO) #frameÁöÑÈïøÂÆΩÔºåÂíåcanvasÂ∑Æ‰∏çÂ§öÁöÑ

        


        vbar=Scrollbar(canvas,orient=VERTICAL) #Á´ñÁõ¥ÊªöÂä®Êù°
        vbar.pack(side=RIGHT, fill=Y, ipadx=2, ipady=2, expand=0)
        vbar.configure(command=canvas.yview)
        hbar=Scrollbar(canvas,orient=HORIZONTAL)#Ê∞¥Âπ≥ÊªöÂä®Êù°
        hbar.pack(side=BOTTOM, fill=X, ipadx=2, ipady=2, expand=0)
        hbar.configure(command=canvas.xview)
        canvas.config(xscrollcommand=hbar.set,yscrollcommand=vbar.set) #ËÆæÁΩÆ  
        canvas.create_window((120,240), window=frame_res)  #create_window

        self.create_frame_send(frame_send,frame_res)
        
        self.after(1000,print(""))






#ÂèÇÊï∞ÈÖçÁΩÆÂå∫ÂüüÂáΩÊï∞
    def create_frame_send(self,frame_send,frame_res):
        Label(frame_send,text='bmsÂú∞ÂùÄ',font=('Arial',10)).pack(side=LEFT, fill=NONE, ipadx=2, ipady=2, expand=0)
        bms_address=Entry(frame_send,width=10)
        bms_address.pack(side=LEFT, fill=NONE, ipadx=2, ipady=2, expand=0)
        Label(frame_send,text='Á´ØÂè£',font=('Arial',10)).pack(side=LEFT, fill=NONE, ipadx=2, ipady=2, expand=0)
        bms_port=Entry(frame_send,width=10)
        bms_port.pack(side=LEFT, fill=NONE, ipadx=2, ipady=2, expand=0)
        Label(frame_send,text='ÂêçÁß∞',font=('Arial',10)).pack(side=LEFT, fill=NONE, ipadx=2, ipady=2, expand=0)
        bms_name=Entry(frame_send,width=10)
        bms_name.pack(side=LEFT, fill=NONE, ipadx=2, ipady=2, expand=0)
        Label(frame_send,text='Áî®Êà∑Âêç',font=('Arial',10)).pack(side=LEFT, fill=NONE, ipadx=2, ipady=2, expand=0)
        bms_username=Entry(frame_send,width=10)
        bms_username.pack(side=LEFT, fill=NONE, ipadx=2, ipady=2, expand=0)
        Label(frame_send,text='ÂØÜÁ†Å',font=('Arial',10)).pack(side=LEFT, fill=NONE, ipadx=2, ipady=2, expand=0)
        bms_password=Entry(frame_send,width=10)
        bms_password.pack(side=LEFT, fill=NONE, ipadx=2, ipady=2, expand=0)
        Label(frame_send,text='ËØ≠Âè•',font=('Arial',10)).pack(side=LEFT, fill=NONE, ipadx=2, ipady=2, expand=0)
        bms_sql=Text(frame_send,width=70,height=6)
        bms_sql.pack(side=LEFT, fill=NONE, ipadx=2, ipady=2, expand=0)


       
        bms_address.insert(END,'73.16.177.215')
        bms_port.insert(END,'1521')
        bms_name.insert(END,'bmsgsdb')
        bms_username.insert(END,'query')
        bms_password.insert(END,'query123')
        bms_sql.insert(END,"select t.create_time,t.mesg_id,t.msg_id,t.mesg_type,t.task_param_var,t.task_param from bms.pm_inf_msg_detail t  where work_date='2022-02-25' and  instr(msg_id,'000000000000000202202255001283239')>0 ")


                       
        button_run=Button(frame_send,text='ÊâßË°å',command=lambda :self.run(bms_address.get(),bms_port.get(),bms_name.get(),bms_username.get(),bms_password.get(),bms_sql.get("0.0","end"),frame_res))
        button_run.pack(side=TOP, fill=NONE, ipadx=2, ipady=2, expand=0)
        button_clear=Button(frame_send,text='Ê∏ÖÁ©∫',command=lambda :self.clear_frame(frame_res))
        button_clear.pack(side=BOTTOM, fill=NONE, ipadx=2, ipady=2, expand=0)
        B = Button(frame_send, text ="ÁÇπÊàë", command = lambda : self.create_frame(frame_res))
        B.pack(side=BOTTOM, fill=NONE, ipadx=2, ipady=2, expand=0)

#‰∏çÂÅúËé∑ÂèñÊñ∞ÁöÑÂÖ≥ËÅîid
    def get_orgin_id(self,content):
        tmp=re.findall(r'(?<=\<Id\>)\d*',content)
        if tmp!=[]:
            for i in tmp:
                self.orgin_id.add(i)
        else:
            pass
#ÊòæÁ§∫ÊúÄÁªàÁöÑÊü•ËØ¢ÁªìÊûú
    def print_res(self,frame_res,res):
        res_order=sorted(res.items(),key=lambda x:x[0],reverse=True)
        r=[]
        #print(res_order[0])
        for h,i in res_order:
            r.append(self.create_frame(frame_res))
        
            r[-1]['time'].insert(END,i[0])
            r[-1]['origin_id'].insert(END,i[1])
            r[-1]['id'].insert(END,i[2])
            r[-1]['msg_type'].insert(END,i[3])
            r[-1]['msg_type'].insert(END,self.mesg_mean[i[3]])
            
            
            
            if i[4]=="":
                org_xml=re.search(r'\<\?xml[\s\S]*',i[5]).group()
                r[-1]['origin_msg'].insert(END,org_xml)
                self.get_orgin_id(i[5])
            else:
                
                org_xml=re.search(r'\<\?xml[\s\S]*',i[4]).group()
                r[-1]['origin_msg'].insert(END,org_xml)
                self.get_orgin_id(i[4])
                
            tmp_origin_msg=ET.fromstring(r[-1]['origin_msg'].get(1.0,END))
            #print(tmp_origin_msg)
            #print(self.indent(tmp_origin_msg, level=0))
            self.indent(tmp_origin_msg, level=0)
            
            #print(tmp_origin_msg)
            r[-1]['parser_msg'].insert(END,ET.tostring(tmp_origin_msg,encoding='UTF-8',method='xml').decode('UTF-8'))
            print(tmp_origin_msg)
            self.show_line_num(r[-1]['parser_msg'],r[-1]['parser_line_num'])
            
        
# Ëé∑ÂæóÊï∞ÊçÆÂ°´ÂÖ•ÂØπÂ∫îÁ©∫Ê†º‰∏≠

    def get_orgin_content(self,bms_address,bms_port,bms_name,bms_username,bms_password,frame_res):
        copy_orgin_id=list(self.orgin_id)
        for i in copy_orgin_id[:]:
            sql="select t.create_time,t.mesg_id,t.msg_id,t.mesg_type,t.task_param_var,t.task_param from bms.pm_inf_msg_detail t  where work_date>'2022-01-01' and (instr(task_param_var,'%s')>0 or instr(task_param,'%s')>0) "%("<Id>"+str(i),"<Id>"+str(i))
            print(sql)
            #print(i)
            self.run_sql_bms(bms_address,bms_port,bms_name,bms_username,bms_password,sql)
            
        
        
    def run(self,bms_address,bms_port,bms_name,bms_username,bms_password,sql,frame_res):

        self.run_sql_bms(bms_address,bms_port,bms_name,bms_username,bms_password,sql)
        
        self.get_orgin_content(bms_address,bms_port,bms_name,bms_username,bms_password,frame_res)
        
        self.print_res(frame_res,self.res)

    def run_sql_bms(self,bms_address,bms_port,bms_name,bms_username,bms_password,bms_sql):
        
        
        #res={'202201011221':['time','id',]}
        bms_content=get_xml(bms_address,bms_port,bms_name,bms_username,bms_password,bms_sql)
        self.db_content=bms_content.get_result()
        print(len(self.db_content))
        print()
        for i in self.db_content:
            
            self.res[i[0]]=[]
            self.res[i[0]].append(i[0])
            self.res[i[0]].append(i[1])
            self.res[i[0]].append(i[2])
            self.res[i[0]].append(i[3])
            if i[4]==None:
                #print(i)
                org_xml=re.search(r'\<\?xml[\s\S]*',str(i[5])).group()
                
                self.res[i[0]].append(org_xml)
                self.get_orgin_id(org_xml)
            elif i[4]!=None:
                print(type(i[4]))
                org_xml=re.search(r'\<\?xml[\s\S]*',i[4]).group()
                self.res[i[0]].append(org_xml)
                self.get_orgin_id(org_xml)
            else:
                pass
            
                
        

            
#Êä•ÊñáÂõûÊòæÂå∫ÂüüÊñ∞Â¢ûÂáΩÊï∞
    def create_frame(self,frame):
        frame_child=Frame(frame)
        frame_child.pack(side=TOP, fill=BOTH, ipadx=2, ipady=2, expand=1,anchor=N)
        frame_child2=Frame(frame_child)
        frame_child2.pack(side=LEFT, fill=BOTH, ipadx=2, ipady=2, expand=1,anchor=N)

        frame_child3=Frame(frame_child)
        frame_child3.pack(side=RIGHT, fill=BOTH, ipadx=2, ipady=2, expand=1,anchor=N)




        
        Label(frame_child2,text='Êó∂Èó¥',font=('Arial',10)).pack(side=TOP, fill=NONE, ipadx=0, ipady=0, expand=0)
        time=Entry(frame_child2)
        time.pack(side=TOP, fill=NONE, ipadx=0, ipady=0, expand=0)

        
        Label(frame_child2,text='Âéüid',font=('Arial',10)).pack(side=TOP, fill=NONE, ipadx=0, ipady=0, expand=0)
        origin_id=Entry(frame_child2)
        origin_id.pack(side=TOP, fill=NONE, ipadx=0, ipady=0, expand=0)
        
        Label(frame_child2,text='id',font=('Arial',10)).pack(side=TOP, fill=NONE, ipadx=0, ipady=0, expand=0)
        id=Entry(frame_child2,width=30)
        id.pack(side=TOP, fill=NONE, ipadx=0, ipady=0, expand=0)
        
        Label(frame_child2,text='Êä•ÊñáÁ±ªÂûã',font=('Arial',10)).pack(side=TOP, fill=NONE, ipadx=0, ipady=0, expand=0)
        msg_type=Entry(frame_child2,width=26)
        msg_type.pack(side=TOP, fill=NONE, ipadx=0, ipady=0, expand=0)

        Label(frame_child3,text='Ë°åÊï∞',font=('Arial',10)).pack(side=LEFT, fill=NONE, ipadx=0, ipady=0, expand=0)
        origin_line_num=Text(frame_child3,width=3,height=20)
        origin_line_num.pack(side=LEFT, fill=NONE, ipadx=0, ipady=0, expand=0)

        Label(frame_child3,text='ÂéüÊä•Êñá',font=('Arial',10)).pack(side=LEFT, fill=NONE, ipadx=0, ipady=0, expand=0)
        origin_msg=Text(frame_child3,width=30,height=20)
        origin_msg.pack(side=LEFT, fill=NONE)
        # origin_msg.insert("end", "Pythofdsafa"+"\n")
        self.show_line_num(origin_msg,origin_line_num)
        



        Label(frame_child3,text='Ë°åÊï∞',font=('Arial',10)).pack(side=LEFT, fill=NONE, ipadx=2, ipady=2, expand=0)
        parser_line_num=Text(frame_child3,width=3,height=20)
        parser_line_num.pack(side=LEFT, fill=NONE, ipadx=2, ipady=2, expand=0)
        


        Label(frame_child3,text='Ê†ºÂºèÂåñÂêéÊä•Êñá',font=('Arial',10)).pack(side=LEFT, fill=NONE, ipadx=2, ipady=2, expand=0)
        parser_msg=Text(frame_child3,width=50,height=20)
        parser_msg.pack(side=LEFT, fill=NONE, ipadx=2, ipady=2, expand=0)


        Label(frame_child3,text='Èáä‰πâ',font=('Arial',10)).pack(side=LEFT, fill=NONE, ipadx=2, ipady=2, expand=0)
        parser_meaning=Text(frame_child3,width=10,height=20)
        parser_meaning.pack(side=LEFT, fill=NONE, ipadx=2, ipady=2, expand=0)

        
        
#ÊªöÂä®Êù°ÊéßÂà∂Â§ö‰∏™Êéß‰ª∂
        def ScrollCommand(*xx):#Âú®ÊªöÂä®Êù°‰∏äÁÇπÂáª„ÄÅÊãñÂä®Á≠âÂä®‰Ωú
            print(*xx)
            origin_msg.yview(*xx)
            parser_msg.yview(*xx)
            parser_meaning.yview(*xx)
            origin_line_num.yview(*xx)
            parser_line_num.yview(*xx)


        origin_msg_bar=Scrollbar(frame_child3,orient=VERTICAL,command=ScrollCommand)
        origin_msg_bar.pack(side=RIGHT, fill=Y, ipadx=2, ipady=2, expand=0)
        origin_msg.configure(yscrollcommand=origin_msg_bar.set)
        
        self.update()
        print("aa")
        return {'time':time,'origin_id':origin_id,'id':id,'msg_type':msg_type,'origin_line_num':origin_line_num,'origin_msg':origin_msg,'parser_line_num':parser_line_num,'parser_msg':parser_msg,'parser_meaning':parser_meaning}
        # return frame_child

#Ê∏ÖÁ©∫‰º†ÂÖ•ÁöÑframe‰∏≠ÁöÑÊâÄÊúâÊéß‰ª∂
    def clear_frame(self,frame):
        for widget in frame.winfo_children():
            widget.destroy()

    def create_line(self):
        pass

#‰∏Ä‰∏™ÊªöÂä®Êù°ÊéßÂà∂Â§ö‰∏™Êéß‰ª∂ÊªöÂä®
    def Wheel(self,event,*text):#Èº†Ê†áÊªöËΩÆÂä®‰Ωú
        print(str(-1*(event.delta/120)))#windowsÁ≥ªÁªüÈúÄË¶ÅÈô§‰ª•120
        for i in text:
            i.yview_scroll(int(-1*(event.delta/120)),'units')
        # text2.yview_scroll(int(-1*(event.delta/120)), "units")
        # text1.yview_scroll(int(-1*(event.delta/120)), "units")
        return "break" 
#ÊòæÁ§∫Ë°åÂè∑
    def show_line_num(self,text,line_num_bar):
        content=text.get("1.0",END)
        txt_arr = content.split("\n")
        if len(txt_arr) == 1:
            line_num_bar.insert("1.1", " 1")
        else:
            for i in range(1, len(txt_arr) + 1):
                line_num_bar.insert("end", " " + str(i))
                if i != len(txt_arr):
                    line_num_bar.insert("end", "\n")
#Ëß£Êûêxml
    def indent(self,elem,level=0):
        i = "\n" + level*"  "
        if len(elem):
            if not elem.text or not elem.text.strip():
                elem.text = i + "  "
            if not elem.tail or not elem.tail.strip():
                elem.tail = i
            for elem in elem:
                self.indent(elem, level+1)
            if not elem.tail or not elem.tail.strip():
                elem.tail = i
        else:
            if level and (not elem.tail or not elem.tail.strip()):
                elem.tail = i
        # return elem




get_dict_meaning("D:\MyProject\copilot\‰∏öÂä°‰∏ª‰ΩìÂàÜÂÜå.xls")

app=NotePad()
app.mainloop()
